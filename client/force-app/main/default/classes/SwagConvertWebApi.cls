/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagConvertWebApi {
    SwagClient client;

    public SwagConvertWebApi(SwagClient client) {
        this.client = client;
    }

    public SwagConvertWebApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Convert HTML to Word DOCX Document
     * Convert HTML to Office Word Document (DOCX) format
     * @param inputRequest HTL input to convert to DOCX (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertWebHtmlToDocx(Map<String, Object> params) {
        client.assertNotNull(params.get('inputRequest'), 'inputRequest');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/html/to/docx',
            (SwagHtmlToOfficeRequest) params.get('inputRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert HTML string to PDF
     * Fully renders a website and returns a PDF of the HTML.  Javascript, HTML5, CSS and other advanced features are all supported.
     * @param input HTML to PDF request parameters (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertWebHtmlToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/web/html/to/pdf',
            (SwagHtmlToPdfRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert HTML string to PNG
     * Fully renders a website and returns a PNG (screenshot) of the HTML.  Javascript, HTML5, CSS and other advanced features are all supported.
     * @param input HTML to PNG request parameters (required)
     * @return Object
     * @throws Swagger.ApiException if fails to make API call
     */
    public Object convertWebHtmlToPng(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Object) client.invoke(
            'POST', '/convert/web/html/to/png',
            (SwagHtmlToPngRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Object.class
        );
    }
    /**
     * Convert Markdown to HTML
     * Convert a markdown file (.md) to HTML
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagHtmlMdResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagHtmlMdResult convertWebMdToHtml(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagHtmlMdResult) client.invoke(
            'POST', '/convert/web/md/to/html', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagHtmlMdResult.class
        );
    }
    /**
     * Convert a URL to PDF
     * Fully renders a website and returns a PDF of the full page.  Javascript, HTML5, CSS and other advanced features are all supported.
     * @param input URL to PDF request parameters (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertWebUrlToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/web/url/to/pdf',
            (SwagScreenshotRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Take screenshot of URL
     * Fully renders a website and returns a PNG screenshot of the full page image.  Javascript, HTML5, CSS and other advanced features are all supported.
     * @param input Screenshot request parameters (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertWebUrlToScreenshot(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/web/url/to/screenshot',
            (SwagScreenshotRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
}
