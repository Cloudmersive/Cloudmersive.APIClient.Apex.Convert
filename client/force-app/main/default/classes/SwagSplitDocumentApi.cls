/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagSplitDocumentApi {
    SwagClient client;

    public SwagSplitDocumentApi(SwagClient client) {
        this.client = client;
    }

    public SwagSplitDocumentApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Split a single Word Document DOCX into Separate Documents by Page
     * Split a Word DOCX Document, comprised of multiple pages into separate Word DOCX document files, with each containing exactly one page.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each Worksheet directly, set to false to only return URLs to each resulting document.  Default is true. (optional)
     * @return SwagSplitDocxDocumentResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagSplitDocxDocumentResult splitDocumentDocx(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagSplitDocxDocumentResult) client.invoke(
            'POST', '/convert/split/docx', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'returnDocumentContents' => (Boolean) params.get('returnDocumentContents')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagSplitDocxDocumentResult.class
        );
    }
    /**
     * Split a PDF file into separate PDF files, one per page
     * Split an input PDF file into separate pages, comprised of one PDF file per page.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to directly return all of the document contents in the DocumentContents field; set to false to return contents as temporary URLs (more efficient for large operations).  Default is false. (optional)
     * @return SwagSplitPdfResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagSplitPdfResult splitDocumentPdfByPage(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagSplitPdfResult) client.invoke(
            'POST', '/convert/split/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'returnDocumentContents' => (Boolean) params.get('returnDocumentContents')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagSplitPdfResult.class
        );
    }
    /**
     * Split a single PowerPoint Presentation PPTX into Separate Slides
     * Split an PowerPoint PPTX Presentation, comprised of multiple slides into separate PowerPoint PPTX presentation files, with each containing exactly one slide.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each presentation directly, set to false to only return URLs to each resulting presentation.  Default is true. (optional)
     * @return SwagSplitPptxPresentationResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagSplitPptxPresentationResult splitDocumentPptx(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagSplitPptxPresentationResult) client.invoke(
            'POST', '/convert/split/pptx', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'returnDocumentContents' => (Boolean) params.get('returnDocumentContents')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagSplitPptxPresentationResult.class
        );
    }
    /**
     * Split a single Excel XLSX into Separate Worksheets
     * Split an Excel XLSX Spreadsheet, comprised of multiple Worksheets (or Tabs) into separate Excel XLSX spreadsheet files, with each containing exactly one Worksheet.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each Worksheet directly, set to false to only return URLs to each resulting worksheet.  Default is true. (optional)
     * @return SwagSplitXlsxWorksheetResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagSplitXlsxWorksheetResult splitDocumentXlsx(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagSplitXlsxWorksheetResult) client.invoke(
            'POST', '/convert/split/xlsx', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'returnDocumentContents' => (Boolean) params.get('returnDocumentContents')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagSplitXlsxWorksheetResult.class
        );
    }
}
