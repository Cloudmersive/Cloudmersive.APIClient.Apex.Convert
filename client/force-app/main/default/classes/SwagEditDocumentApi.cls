/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagEditDocumentApi {
    SwagClient client;

    public SwagEditDocumentApi(SwagClient client) {
        this.client = client;
    }

    public SwagEditDocumentApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Begin editing a document
     * Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.
     * @param inputFile Input file to perform the operation on. (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String editDocumentBeginEditing(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (String) client.invoke(
            'POST', '/convert/edit/begin-editing', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            String.class
        );
    }
    /**
     * Accept all tracked changes, revisions in a Word DOCX document
     * Accepts all tracked changes and revisions in a Word DOCX document.  This will accept all pending changes in the document when tracked changes is turned on.  Track changes will remain on (if it is on) after this oepration is completed.
     * @param inputFile Input file to perform the operation on. (required)
     * @param autorepair Optional; automatically repair input documents that have errors (default is true) (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editDocumentDocxAcceptAllTrackChanges(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/docx/track-changes/accept-all', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'autorepair' => (Boolean) params.get('autorepair')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Get body from a Word DOCX document
     * Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document
     * @param reqConfig Document input request (required)
     * @return SwagGetDocxBodyResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetDocxBodyResponse editDocumentDocxBody(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetDocxBodyResponse) client.invoke(
            'POST', '/convert/edit/docx/get-body',
            (SwagGetDocxBodyRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetDocxBodyResponse.class
        );
    }
    /**
     * Create a blank Word DOCX document
     * Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.
     * @param input Document input request (required)
     * @return SwagCreateBlankDocxResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagCreateBlankDocxResponse editDocumentDocxCreateBlankDocument(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagCreateBlankDocxResponse) client.invoke(
            'POST', '/convert/edit/docx/create/blank',
            (SwagCreateBlankDocxRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagCreateBlankDocxResponse.class
        );
    }
    /**
     * Delete, remove pages from a Word DOCX document
     * Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed
     * @param reqConfig Document input request (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editDocumentDocxDeletePages(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/edit/docx/delete-pages',
            (SwagRemoveDocxPagesRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Deletes a table row in an existing table in a Word DOCX document
     * Deletes an existing table row in a Word DOCX Document and returns the result.
     * @param reqConfig Document input request (required)
     * @return SwagDeleteDocxTableRowResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDeleteDocxTableRowResponse editDocumentDocxDeleteTableRow(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagDeleteDocxTableRowResponse) client.invoke(
            'POST', '/convert/edit/docx/delete-table-row',
            (SwagDeleteDocxTableRowRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagDeleteDocxTableRowResponse.class
        );
    }
    /**
     * Deletes a range of multiple table rows in an existing table in a Word DOCX document
     * Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.
     * @param reqConfig Document input request (required)
     * @return SwagDeleteDocxTableRowRangeResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDeleteDocxTableRowRangeResponse editDocumentDocxDeleteTableRowRange(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagDeleteDocxTableRowRangeResponse) client.invoke(
            'POST', '/convert/edit/docx/delete-table-row/range',
            (SwagDeleteDocxTableRowRangeRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagDeleteDocxTableRowRangeResponse.class
        );
    }
    /**
     * Disable track changes, revisions in a Word DOCX document
     * Diables tracking of changes and revisions in a Word DOCX document, and accepts any pending changes.  Users editing the document will no longer see changes tracked automatically.
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editDocumentDocxDisableTrackChanges(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/docx/track-changes/disable', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Enable track changes, revisions in a Word DOCX document
     * Enables tracking of changes and revisions in a Word DOCX document.  Users editing the document will see changes tracked automatically, with edits highlighted, and the ability to accept or reject changes made to the document.
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editDocumentDocxEnableTrackChanges(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/docx/track-changes/enable', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Find matching paragraphs in a Word DOCX document
     * Returns the paragraphs defined in the Word Document (DOCX) format file that match the input criteria
     * @param reqConfig Document input request (required)
     * @return SwagFindDocxParagraphResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagFindDocxParagraphResponse editDocumentDocxFindParagraph(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagFindDocxParagraphResponse) client.invoke(
            'POST', '/convert/edit/docx/find/paragraph',
            (SwagFindDocxParagraphRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagFindDocxParagraphResponse.class
        );
    }
    /**
     * Get comments from a Word DOCX document as a flat list
     * Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).
     * @param reqConfig Document input request (required)
     * @return SwagGetDocxCommentsResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetDocxCommentsResponse editDocumentDocxGetComments(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetDocxCommentsResponse) client.invoke(
            'POST', '/convert/edit/docx/get-comments/flat-list',
            (SwagGetDocxGetCommentsRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetDocxCommentsResponse.class
        );
    }
    /**
     * Get comments from a Word DOCX document hierarchically
     * Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.
     * @param reqConfig Document input request (required)
     * @return SwagGetDocxCommentsHierarchicalRespo
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetDocxCommentsHierarchicalRespo editDocumentDocxGetCommentsHierarchical(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetDocxCommentsHierarchicalRespo) client.invoke(
            'POST', '/convert/edit/docx/get-comments/hierarchical',
            (SwagGetDocxGetCommentsHierarchicalRe) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetDocxCommentsHierarchicalRespo.class
        );
    }
    /**
     * Get all content controls (form fields) and values in a Word DOCX document
     * Returns all the content controls, used for creating form fields, in a Office Word Document (docx)
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagGetDocxContentControlsResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetDocxContentControlsResponse editDocumentDocxGetContentControls(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagGetDocxContentControlsResponse) client.invoke(
            'POST', '/convert/edit/docx/get-content-controls', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagGetDocxContentControlsResponse.class
        );
    }
    /**
     * Get all form fields in a Word DOCX document
     * Returns all the content controls, used for creating form fields, as well as handlebar style text-based form fields such as &quot;{{FieldName}}&quot;, in a Office Word Document (docx)
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagGetDocxGetFormFieldsResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetDocxGetFormFieldsResponse editDocumentDocxGetFormFields(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagGetDocxGetFormFieldsResponse) client.invoke(
            'POST', '/convert/edit/docx/get-form-fields', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagGetDocxGetFormFieldsResponse.class
        );
    }
    /**
     * Get content of a footer from a Word DOCX document
     * Returns the footer content from a Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @return SwagGetDocxHeadersAndFootersResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetDocxHeadersAndFootersResponse editDocumentDocxGetHeadersAndFooters(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetDocxHeadersAndFootersResponse) client.invoke(
            'POST', '/convert/edit/docx/get-headers-and-footers',
            (SwagGetDocxHeadersAndFootersRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetDocxHeadersAndFootersResponse.class
        );
    }
    /**
     * Get images from a Word DOCX document
     * Returns the images defined in the Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @return SwagGetDocxImagesResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetDocxImagesResponse editDocumentDocxGetImages(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetDocxImagesResponse) client.invoke(
            'POST', '/convert/edit/docx/get-images',
            (SwagGetDocxImagesRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetDocxImagesResponse.class
        );
    }
    /**
     * Get macro information from a Word DOCX/DOCM document
     * Returns information about the Macros (e.g. VBA) defined in the Word Document
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagGetMacrosResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetMacrosResponse editDocumentDocxGetMacroInformation(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagGetMacrosResponse) client.invoke(
            'POST', '/convert/edit/docx/get-macros', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagGetMacrosResponse.class
        );
    }
    /**
     * Get all metadata properties in Word DOCX document
     * Returns all the metadata properties in an Office Word Document (docx)
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagGetDocxMetadataPropertiesRespons
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetDocxMetadataPropertiesRespons editDocumentDocxGetMetadataProperties(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagGetDocxMetadataPropertiesRespons) client.invoke(
            'POST', '/convert/edit/docx/get-metadata', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagGetDocxMetadataPropertiesRespons.class
        );
    }
    /**
     * Get sections from a Word DOCX document
     * Returns the sections defined in the Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @return SwagGetDocxSectionsResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetDocxSectionsResponse editDocumentDocxGetSections(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetDocxSectionsResponse) client.invoke(
            'POST', '/convert/edit/docx/get-sections',
            (SwagGetDocxSectionsRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetDocxSectionsResponse.class
        );
    }
    /**
     * Get styles from a Word DOCX document
     * Returns the styles defined in the Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @return SwagGetDocxStylesResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetDocxStylesResponse editDocumentDocxGetStyles(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetDocxStylesResponse) client.invoke(
            'POST', '/convert/edit/docx/get-styles',
            (SwagGetDocxStylesRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetDocxStylesResponse.class
        );
    }
    /**
     * Get a specific table by index in a Word DOCX document
     * Returns the specific table object by its 0-based index in an Office Word Document (DOCX)
     * @param reqConfig Document input request (required)
     * @return SwagGetDocxTableByIndexResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetDocxTableByIndexResponse editDocumentDocxGetTableByIndex(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetDocxTableByIndexResponse) client.invoke(
            'POST', '/convert/edit/docx/get-table/by-index',
            (SwagGetDocxTableByIndexRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetDocxTableByIndexResponse.class
        );
    }
    /**
     * Gets the contents of an existing table row in an existing table in a Word DOCX document
     * Gets the contents of an existing table row in a Word DOCX Document and returns the result.
     * @param reqConfig Document input request (required)
     * @return SwagGetDocxTableRowResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetDocxTableRowResponse editDocumentDocxGetTableRow(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetDocxTableRowResponse) client.invoke(
            'POST', '/convert/edit/docx/get-table-row',
            (SwagGetDocxTableRowRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetDocxTableRowResponse.class
        );
    }
    /**
     * Get all tables in Word DOCX document
     * Returns all the table objects in an Office Word Document (docx)
     * @param reqConfig Document input request (required)
     * @return SwagGetDocxTablesResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetDocxTablesResponse editDocumentDocxGetTables(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetDocxTablesResponse) client.invoke(
            'POST', '/convert/edit/docx/get-tables',
            (SwagGetDocxTablesRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetDocxTablesResponse.class
        );
    }
    /**
     * Insert a new comment into a Word DOCX document attached to a paragraph
     * Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return SwagInsertDocxCommentOnParagraphResp
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagInsertDocxCommentOnParagraphResp editDocumentDocxInsertCommentOnParagraph(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagInsertDocxCommentOnParagraphResp) client.invoke(
            'POST', '/convert/edit/docx/insert-comment/on/paragraph',
            (SwagDocxInsertCommentOnParagraphRequ) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagInsertDocxCommentOnParagraphResp.class
        );
    }
    /**
     * Insert image into a Word DOCX document
     * Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return SwagDocxInsertImageResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocxInsertImageResponse editDocumentDocxInsertImage(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagDocxInsertImageResponse) client.invoke(
            'POST', '/convert/edit/docx/insert-image',
            (SwagDocxInsertImageRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagDocxInsertImageResponse.class
        );
    }
    /**
     * Insert a new paragraph into a Word DOCX document
     * Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return SwagInsertDocxInsertParagraphRespons
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagInsertDocxInsertParagraphRespons editDocumentDocxInsertParagraph(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagInsertDocxInsertParagraphRespons) client.invoke(
            'POST', '/convert/edit/docx/insert-paragraph',
            (SwagInsertDocxInsertParagraphRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagInsertDocxInsertParagraphRespons.class
        );
    }
    /**
     * Insert a new table into a Word DOCX document
     * Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return SwagInsertDocxTablesResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagInsertDocxTablesResponse editDocumentDocxInsertTable(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagInsertDocxTablesResponse) client.invoke(
            'POST', '/convert/edit/docx/insert-table',
            (SwagInsertDocxTablesRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagInsertDocxTablesResponse.class
        );
    }
    /**
     * Insert a new row into an existing table in a Word DOCX document
     * Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return SwagInsertDocxTableRowResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagInsertDocxTableRowResponse editDocumentDocxInsertTableRow(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagInsertDocxTableRowResponse) client.invoke(
            'POST', '/convert/edit/docx/insert-table-row',
            (SwagInsertDocxTableRowRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagInsertDocxTableRowResponse.class
        );
    }
    /**
     * Get pages and content from a Word DOCX document
     * Returns the pages and contents of each page defined in the Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @return SwagGetDocxPagesResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetDocxPagesResponse editDocumentDocxPages(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetDocxPagesResponse) client.invoke(
            'POST', '/convert/edit/docx/get-pages',
            (SwagGetDocxPagesRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetDocxPagesResponse.class
        );
    }
    /**
     * Remove all comments from a Word DOCX document
     * Removes all of the comments from a Word Document.
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editDocumentDocxRemoveAllComments(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/docx/comments/remove-all', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Remove headers and footers from Word DOCX document
     * Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return SwagRemoveDocxHeadersAndFootersRespo
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagRemoveDocxHeadersAndFootersRespo editDocumentDocxRemoveHeadersAndFooters(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagRemoveDocxHeadersAndFootersRespo) client.invoke(
            'POST', '/convert/edit/docx/remove-headers-and-footers',
            (SwagRemoveDocxHeadersAndFootersReque) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagRemoveDocxHeadersAndFootersRespo.class
        );
    }
    /**
     * Delete any object in a Word DOCX document
     * Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return SwagDocxRemoveObjectResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocxRemoveObjectResponse editDocumentDocxRemoveObject(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagDocxRemoveObjectResponse) client.invoke(
            'POST', '/convert/edit/docx/remove-object',
            (SwagDocxRemoveObjectRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagDocxRemoveObjectResponse.class
        );
    }
    /**
     * Replace string in Word DOCX document
     * Replace all instances of a string in an Office Word Document (docx)
     * @param reqConfig Document string replacement configuration input (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editDocumentDocxReplace(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/edit/docx/replace-all',
            (SwagReplaceStringRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Replace multiple strings in Word DOCX document, return result
     * Replace all instances of multiple strings in an Office Word Document (docx)
     * @param reqConfig Document string replacement configuration input (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editDocumentDocxReplaceMulti(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/edit/docx/replace-all/multi',
            (SwagMultiReplaceStringRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Replace multiple strings in Word DOCX document, return edit session
     * Replace all instances of multiple strings in an Office Word Document (docx).  Returns an edit session URL so that you can chain together multiple edit operations without having to send the entire document contents back and forth multiple times.  Call the Finish Editing API to retrieve the final document once editing is complete.
     * @param reqConfig Document string replacement configuration input (required)
     * @return SwagDocumentEditingEditSession
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocumentEditingEditSession editDocumentDocxReplaceMultiEditSession(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagDocumentEditingEditSession) client.invoke(
            'POST', '/convert/edit/docx/replace-all/multi/edit-session',
            (SwagMultiReplaceStringRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagDocumentEditingEditSession.class
        );
    }
    /**
     * Replace matching paragraphs in a Word DOCX document
     * Returns the edited Word Document (DOCX) format file with the matching paragraphs replaced as requested.  Replace a paragraph with another object such as an image.  Useful for performing templating operations.
     * @param reqConfig Document input request (required)
     * @return SwagReplaceDocxParagraphResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagReplaceDocxParagraphResponse editDocumentDocxReplaceParagraph(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagReplaceDocxParagraphResponse) client.invoke(
            'POST', '/convert/edit/docx/replace/paragraph',
            (SwagReplaceDocxParagraphRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagReplaceDocxParagraphResponse.class
        );
    }
    /**
     * Set custom property metadata properties in Word DOCX document
     * Sets the custom property metadata for the metadata properties in an Office Word Document (docx)
     * @param input  (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editDocumentDocxSetCustomMetadataProperties(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/edit/docx/set-metadata/custom-property',
            (SwagDocxSetCustomMetadataPropertiesR) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Set the footer in a Word DOCX document
     * Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return SwagDocxSetFooterResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocxSetFooterResponse editDocumentDocxSetFooter(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagDocxSetFooterResponse) client.invoke(
            'POST', '/convert/edit/docx/set-footer',
            (SwagDocxSetFooterRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagDocxSetFooterResponse.class
        );
    }
    /**
     * Add page number to footer in a Word DOCX document
     * Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return SwagDocxSetFooterResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocxSetFooterResponse editDocumentDocxSetFooterAddPageNumber(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagDocxSetFooterResponse) client.invoke(
            'POST', '/convert/edit/docx/set-footer/add-page-number',
            (SwagDocxSetFooterAddPageNumberReques) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagDocxSetFooterResponse.class
        );
    }
    /**
     * Set and fill values for form fields in a Word DOCX document
     * Modifies a Office Word Document (docx) by filling in form fields using the provided values.
     * @param reqConfig  (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editDocumentDocxSetFormFields(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/edit/docx/set-form-fields',
            (SwagDocxSetFormFieldsRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Set the header in a Word DOCX document
     * Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return SwagDocxSetHeaderResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocxSetHeaderResponse editDocumentDocxSetHeader(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagDocxSetHeaderResponse) client.invoke(
            'POST', '/convert/edit/docx/set-header',
            (SwagDocxSetHeaderRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagDocxSetHeaderResponse.class
        );
    }
    /**
     * Update, set contents of a table cell in an existing table in a Word DOCX document
     * Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return SwagUpdateDocxTableCellResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagUpdateDocxTableCellResponse editDocumentDocxUpdateTableCell(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagUpdateDocxTableCellResponse) client.invoke(
            'POST', '/convert/edit/docx/update-table-cell',
            (SwagUpdateDocxTableCellRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagUpdateDocxTableCellResponse.class
        );
    }
    /**
     * Update, set contents of a table row in an existing table in a Word DOCX document
     * Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return SwagUpdateDocxTableRowResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagUpdateDocxTableRowResponse editDocumentDocxUpdateTableRow(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagUpdateDocxTableRowResponse) client.invoke(
            'POST', '/convert/edit/docx/update-table-row',
            (SwagUpdateDocxTableRowRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagUpdateDocxTableRowResponse.class
        );
    }
    /**
     * Finish editing document, and download result from document editing
     * Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
     * @param reqConfig Cloudmersive Document URL to complete editing on (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editDocumentFinishEditing(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/edit/finish-editing',
            (SwagFinishEditingRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Delete, remove slides from a PowerPoint PPTX presentation document
     * Edits the input PowerPoint PPTX presentation document to remove the specified slides
     * @param reqConfig Presentation input request (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editDocumentPptxDeleteSlides(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/edit/pptx/delete-slides',
            (SwagRemovePptxSlidesRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Get macro information from a PowerPoint PPTX/PPTM presentation document
     * Returns information about the Macros (e.g. VBA) defined in the PowerPoint Document
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagGetMacrosResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetMacrosResponse editDocumentPptxGetMacroInformation(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagGetMacrosResponse) client.invoke(
            'POST', '/convert/edit/pptx/get-macros', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagGetMacrosResponse.class
        );
    }
    /**
     * Replace string in PowerPoint PPTX presentation
     * Replace all instances of a string in an Office PowerPoint Document (pptx)
     * @param reqConfig Replacement document configuration input (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editDocumentPptxReplace(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/edit/pptx/replace-all',
            (SwagReplaceStringRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Append row to a Excel XLSX spreadsheet, worksheet
     * Appends a row to the end of an Excel Spreadsheet worksheet.
     * @param input Document input request (required)
     * @return SwagAppendXlsxRowResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagAppendXlsxRowResponse editDocumentXlsxAppendRow(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagAppendXlsxRowResponse) client.invoke(
            'POST', '/convert/edit/xlsx/append-row',
            (SwagAppendXlsxRowRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagAppendXlsxRowResponse.class
        );
    }
    /**
     * Clear cell contents in an Excel XLSX spreadsheet, worksheet by index
     * Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
     * @param input Document input request (required)
     * @return SwagClearXlsxCellResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagClearXlsxCellResponse editDocumentXlsxClearCellByIndex(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagClearXlsxCellResponse) client.invoke(
            'POST', '/convert/edit/xlsx/clear-cell/by-index',
            (SwagClearXlsxCellRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagClearXlsxCellResponse.class
        );
    }
    /**
     * Clear row from a Excel XLSX spreadsheet, worksheet
     * Clears data from a specific row in the Excel Spreadsheet worksheet, leaving a blank row. Use the Get Rows And Cells API to enumerate available rows in a spreadsheet.
     * @param input Document input request (required)
     * @return SwagClearXlsxRowResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagClearXlsxRowResponse editDocumentXlsxClearRow(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagClearXlsxRowResponse) client.invoke(
            'POST', '/convert/edit/xlsx/clear-row',
            (SwagClearXlsxRowRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagClearXlsxRowResponse.class
        );
    }
    /**
     * Create a blank Excel XLSX spreadsheet
     * Returns a blank Excel XLSX Spreadsheet (XLSX) format file
     * @param input Document input request (required)
     * @return SwagCreateBlankSpreadsheetResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagCreateBlankSpreadsheetResponse editDocumentXlsxCreateBlankSpreadsheet(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagCreateBlankSpreadsheetResponse) client.invoke(
            'POST', '/convert/edit/xlsx/create/blank',
            (SwagCreateBlankSpreadsheetRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagCreateBlankSpreadsheetResponse.class
        );
    }
    /**
     * Create a new Excel XLSX spreadsheet from column and row data
     * Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input
     * @param input Document input request (required)
     * @return SwagCreateSpreadsheetFromDataRespons
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagCreateSpreadsheetFromDataRespons editDocumentXlsxCreateSpreadsheetFromData(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagCreateSpreadsheetFromDataRespons) client.invoke(
            'POST', '/convert/edit/xlsx/create/from/data',
            (SwagCreateSpreadsheetFromDataRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagCreateSpreadsheetFromDataRespons.class
        );
    }
    /**
     * Delete, remove worksheet from an Excel XLSX spreadsheet document
     * Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
     * @param reqConfig Spreadsheet input request (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editDocumentXlsxDeleteWorksheet(Map<String, Object> params) {
        client.assertNotNull(params.get('reqConfig'), 'reqConfig');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/edit/xlsx/delete-worksheet',
            (SwagRemoveXlsxWorksheetRequest) params.get('reqConfig'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Disable Shared Workbook (legacy) in Excel XLSX spreadsheet
     * Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
     * @param input Document input request (required)
     * @return SwagDisableSharedWorkbookResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDisableSharedWorkbookResponse editDocumentXlsxDisableSharedWorkbook(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagDisableSharedWorkbookResponse) client.invoke(
            'POST', '/convert/edit/xlsx/configuration/disable-shared-workbook',
            (SwagDisableSharedWorkbookRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagDisableSharedWorkbookResponse.class
        );
    }
    /**
     * Enable Shared Workbook (legacy) in Excel XLSX spreadsheet
     * Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
     * @param input Document input request (required)
     * @return SwagEnableSharedWorkbookResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagEnableSharedWorkbookResponse editDocumentXlsxEnableSharedWorkbook(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagEnableSharedWorkbookResponse) client.invoke(
            'POST', '/convert/edit/xlsx/configuration/enable-shared-workbook',
            (SwagEnableSharedWorkbookRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagEnableSharedWorkbookResponse.class
        );
    }
    /**
     * Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier
     * Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @return SwagGetXlsxCellByIdentifierResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetXlsxCellByIdentifierResponse editDocumentXlsxGetCellByIdentifier(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetXlsxCellByIdentifierResponse) client.invoke(
            'POST', '/convert/edit/xlsx/get-cell/by-identifier',
            (SwagGetXlsxCellByIdentifierRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetXlsxCellByIdentifierResponse.class
        );
    }
    /**
     * Get cell from an Excel XLSX spreadsheet, worksheet by index
     * Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @return SwagGetXlsxCellResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetXlsxCellResponse editDocumentXlsxGetCellByIndex(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetXlsxCellResponse) client.invoke(
            'POST', '/convert/edit/xlsx/get-cell/by-index',
            (SwagGetXlsxCellRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetXlsxCellResponse.class
        );
    }
    /**
     * Get columns from a Excel XLSX spreadsheet, worksheet
     * Returns the columns defined in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @return SwagGetXlsxColumnsResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetXlsxColumnsResponse editDocumentXlsxGetColumns(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetXlsxColumnsResponse) client.invoke(
            'POST', '/convert/edit/xlsx/get-columns',
            (SwagGetXlsxColumnsRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetXlsxColumnsResponse.class
        );
    }
    /**
     * Get images from a Excel XLSX spreadsheet, worksheet
     * Returns the images defined in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @return SwagGetXlsxImagesResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetXlsxImagesResponse editDocumentXlsxGetImages(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetXlsxImagesResponse) client.invoke(
            'POST', '/convert/edit/xlsx/get-images',
            (SwagGetXlsxImagesRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetXlsxImagesResponse.class
        );
    }
    /**
     * Get macro information from a Excel XLSX/XLSM spreadsheet, worksheet
     * Returns information about the Macros (e.g. VBA) defined in the Excel Spreadsheet
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagGetMacrosResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetMacrosResponse editDocumentXlsxGetMacroInformation(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagGetMacrosResponse) client.invoke(
            'POST', '/convert/edit/xlsx/get-macros', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagGetMacrosResponse.class
        );
    }
    /**
     * Get rows and cells from a Excel XLSX spreadsheet, worksheet
     * Returns the rows and cells defined in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @return SwagGetXlsxRowsAndCellsResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetXlsxRowsAndCellsResponse editDocumentXlsxGetRowsAndCells(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetXlsxRowsAndCellsResponse) client.invoke(
            'POST', '/convert/edit/xlsx/get-rows-and-cells',
            (SwagGetXlsxRowsAndCellsRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetXlsxRowsAndCellsResponse.class
        );
    }
    /**
     * Get a specific row from a Excel XLSX spreadsheet, worksheet by path
     * Returns the specific row and its cells defined in the Excel Spreadsheet worksheet based on the specified path.
     * @param input Document input request (required)
     * @return SwagGetXlsxSpecificRowResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetXlsxSpecificRowResponse editDocumentXlsxGetSpecificRow(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetXlsxSpecificRowResponse) client.invoke(
            'POST', '/convert/edit/xlsx/get-specific-row',
            (SwagGetXlsxSpecificRowRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetXlsxSpecificRowResponse.class
        );
    }
    /**
     * Get styles from a Excel XLSX spreadsheet, worksheet
     * Returns the style defined in the Excel Spreadsheet
     * @param input Document input request (required)
     * @return SwagGetXlsxStylesResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetXlsxStylesResponse editDocumentXlsxGetStyles(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetXlsxStylesResponse) client.invoke(
            'POST', '/convert/edit/xlsx/get-styles',
            (SwagGetXlsxStylesRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetXlsxStylesResponse.class
        );
    }
    /**
     * Get worksheets from a Excel XLSX spreadsheet
     * Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file
     * @param input Document input request (required)
     * @return SwagGetXlsxWorksheetsResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetXlsxWorksheetsResponse editDocumentXlsxGetWorksheets(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetXlsxWorksheetsResponse) client.invoke(
            'POST', '/convert/edit/xlsx/get-worksheets',
            (SwagGetXlsxWorksheetsRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetXlsxWorksheetsResponse.class
        );
    }
    /**
     * Insert a new worksheet into an Excel XLSX spreadsheet
     * Inserts a new worksheet into an Excel Spreadsheet
     * @param input Document input request (required)
     * @return SwagInsertXlsxWorksheetResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagInsertXlsxWorksheetResponse editDocumentXlsxInsertWorksheet(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagInsertXlsxWorksheetResponse) client.invoke(
            'POST', '/convert/edit/xlsx/insert-worksheet',
            (SwagInsertXlsxWorksheetRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagInsertXlsxWorksheetResponse.class
        );
    }
    /**
     * Rename a specific worksheet in a Excel XLSX spreadsheet
     * Edits the input Excel XLSX spreadsheet document to rename a specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
     * @param input Document input request (required)
     * @return SwagRenameXlsxWorksheetResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagRenameXlsxWorksheetResponse editDocumentXlsxRenameWorksheet(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagRenameXlsxWorksheetResponse) client.invoke(
            'POST', '/convert/edit/xlsx/rename-worksheet',
            (SwagRenameXlsxWorksheetRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagRenameXlsxWorksheetResponse.class
        );
    }
    /**
     * Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier
     * Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet
     * @param input Document input request (required)
     * @return SwagSetXlsxCellByIdentifierResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagSetXlsxCellByIdentifierResponse editDocumentXlsxSetCellByIdentifier(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagSetXlsxCellByIdentifierResponse) client.invoke(
            'POST', '/convert/edit/xlsx/set-cell/by-identifier',
            (SwagSetXlsxCellByIdentifierRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagSetXlsxCellByIdentifierResponse.class
        );
    }
    /**
     * Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index
     * Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
     * @param input Document input request (required)
     * @return SwagSetXlsxCellResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagSetXlsxCellResponse editDocumentXlsxSetCellByIndex(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagSetXlsxCellResponse) client.invoke(
            'POST', '/convert/edit/xlsx/set-cell/by-index',
            (SwagSetXlsxCellRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagSetXlsxCellResponse.class
        );
    }
}
