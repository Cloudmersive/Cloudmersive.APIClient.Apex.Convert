/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Request to encrypt an existing Zip Archive file and protect it with a password
 */
public class SwagZipEncryptionAdvancedRequest implements Swagger.MappedProperties {
    /**
     * Input Zip File archive contents in bytes
     * @return inputFileContents
     */
    public Blob inputFileContents { get; set; }

    /**
     * Password to place on the Zip file; the longer the password, the more secure
     * @return password
     */
    public String password { get; set; }

    /**
     * Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm).  Default is AES-256.
     * @return encryptionAlgorithm
     */
    public String encryptionAlgorithm { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'InputFileContents' => 'inputFileContents',
        'Password' => 'password',
        'EncryptionAlgorithm' => 'encryptionAlgorithm'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagZipEncryptionAdvancedRequest getExample() {
        SwagZipEncryptionAdvancedRequest zipEncryptionAdvancedRequest = new SwagZipEncryptionAdvancedRequest();
        zipEncryptionAdvancedRequest.inputFileContents = EncodingUtil.base64Decode('VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu');
        zipEncryptionAdvancedRequest.password = 'aeiou';
        zipEncryptionAdvancedRequest.encryptionAlgorithm = 'aeiou';
        return zipEncryptionAdvancedRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagZipEncryptionAdvancedRequest) {
            SwagZipEncryptionAdvancedRequest zipEncryptionAdvancedRequest = (SwagZipEncryptionAdvancedRequest) obj;
            return this.inputFileContents == zipEncryptionAdvancedRequest.inputFileContents
                && this.password == zipEncryptionAdvancedRequest.password
                && this.encryptionAlgorithm == zipEncryptionAdvancedRequest.encryptionAlgorithm;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (inputFileContents == null ? 0 : System.hashCode(inputFileContents));
        hashCode = (17 * hashCode) + (password == null ? 0 : System.hashCode(password));
        hashCode = (17 * hashCode) + (encryptionAlgorithm == null ? 0 : System.hashCode(encryptionAlgorithm));
        return hashCode;
    }
}

