/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagMergeDocumentApi {
    SwagClient client;

    public SwagMergeDocumentApi(SwagClient client) {
        this.client = client;
    }

    public SwagMergeDocumentApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Merge Multple Word DOCX Together
     * Combine multiple Office Word Documents (docx) into one single Office Word document
     * @param inputFile1 First input file to perform the operation on. (required)
     * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob mergeDocumentDocx(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile1'), 'inputFile1');
        client.assertNotNull(params.get('inputFile2'), 'inputFile2');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile1', (Blob) params.get('inputFile1')));
        form.addAll(client.makeParam('inputFile2', (Blob) params.get('inputFile2')));

        return (Blob) client.invoke(
            'POST', '/convert/merge/docx', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Merge Multple PDF Files Together
     * Combine multiple PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
     * @param inputFile1 First input file to perform the operation on. (required)
     * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob mergeDocumentPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile1'), 'inputFile1');
        client.assertNotNull(params.get('inputFile2'), 'inputFile2');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile1', (Blob) params.get('inputFile1')));
        form.addAll(client.makeParam('inputFile2', (Blob) params.get('inputFile2')));

        return (Blob) client.invoke(
            'POST', '/convert/merge/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Merge Multple PNG Files Together
     * Combine multiple PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
     * @param inputFile1 First input file to perform the operation on. (required)
     * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob mergeDocumentPng(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile1'), 'inputFile1');
        client.assertNotNull(params.get('inputFile2'), 'inputFile2');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile1', (Blob) params.get('inputFile1')));
        form.addAll(client.makeParam('inputFile2', (Blob) params.get('inputFile2')));

        return (Blob) client.invoke(
            'POST', '/convert/merge/png/vertical', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Merge Multple PowerPoint PPTX Together
     * Combine multiple Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
     * @param inputFile1 First input file to perform the operation on. (required)
     * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob mergeDocumentPptx(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile1'), 'inputFile1');
        client.assertNotNull(params.get('inputFile2'), 'inputFile2');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile1', (Blob) params.get('inputFile1')));
        form.addAll(client.makeParam('inputFile2', (Blob) params.get('inputFile2')));

        return (Blob) client.invoke(
            'POST', '/convert/merge/pptx', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Merge Multple Excel XLSX Together
     * Combine multiple Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
     * @param inputFile1 First input file to perform the operation on. (required)
     * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob mergeDocumentXlsx(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile1'), 'inputFile1');
        client.assertNotNull(params.get('inputFile2'), 'inputFile2');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile1', (Blob) params.get('inputFile1')));
        form.addAll(client.makeParam('inputFile2', (Blob) params.get('inputFile2')));

        return (Blob) client.invoke(
            'POST', '/convert/merge/xlsx', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
}
