/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagValidateDocumentApi {
    SwagClient client;

    public SwagValidateDocumentApi(SwagClient client) {
        this.client = client;
    }

    public SwagValidateDocumentApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Autodetect content type and validate
     * Automatically detect the type of content, verify and validate that the content is indeed fully valid at depth, and then report the validation result.
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagAutodetectDocumentValidationResu
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagAutodetectDocumentValidationResu validateDocumentAutodetectValidation(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagAutodetectDocumentValidationResu) client.invoke(
            'POST', '/convert/validate/autodetect', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagAutodetectDocumentValidationResu.class
        );
    }
    /**
     * Validate a CSV file document (CSV)
     * Validate a CSV file document (CSV); if the document is not valid, identifies the errors in the document
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagDocumentValidationResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocumentValidationResult validateDocumentCsvValidation(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagDocumentValidationResult) client.invoke(
            'POST', '/convert/validate/csv', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagDocumentValidationResult.class
        );
    }
    /**
     * Validate a Word document (DOCX)
     * Validate a Word document (DOCX); if the document is not valid, identifies the errors in the document
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagDocumentValidationResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocumentValidationResult validateDocumentDocxValidation(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagDocumentValidationResult) client.invoke(
            'POST', '/convert/validate/docx', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagDocumentValidationResult.class
        );
    }
    /**
     * Validate if a file is executable
     * Validate if an input file is a binary executable file; if the document is not valid
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagDocumentValidationResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocumentValidationResult validateDocumentExecutableValidation(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagDocumentValidationResult) client.invoke(
            'POST', '/convert/validate/executable', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagDocumentValidationResult.class
        );
    }
    /**
     * Validate a GZip Archive file (gzip or gz)
     * Validate a GZip archive file (GZIP or GZ)
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagDocumentValidationResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocumentValidationResult validateDocumentGZipValidation(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagDocumentValidationResult) client.invoke(
            'POST', '/convert/validate/gzip', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagDocumentValidationResult.class
        );
    }
    /**
     * Validate a JSON file
     * Validate a JSON (JavaScript Object Notation) document file; if the document is not valid, identifies the errors in the document
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagDocumentValidationResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocumentValidationResult validateDocumentJsonValidation(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagDocumentValidationResult) client.invoke(
            'POST', '/convert/validate/json', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagDocumentValidationResult.class
        );
    }
    /**
     * Validate a PDF document file
     * Validate a PDF document; if the document is not valid, identifies the errors in the document.  Also checks if the PDF is password protected.
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagDocumentValidationResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocumentValidationResult validateDocumentPdfValidation(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagDocumentValidationResult) client.invoke(
            'POST', '/convert/validate/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagDocumentValidationResult.class
        );
    }
    /**
     * Validate a PowerPoint presentation (PPTX)
     * Validate a PowerPoint presentation (PPTX); if the document is not valid, identifies the errors in the document
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagDocumentValidationResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocumentValidationResult validateDocumentPptxValidation(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagDocumentValidationResult) client.invoke(
            'POST', '/convert/validate/pptx', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagDocumentValidationResult.class
        );
    }
    /**
     * Validate a RAR Archive file (RAR)
     * Validate a RAR archive file (RAR)
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagDocumentValidationResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocumentValidationResult validateDocumentRarValidation(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagDocumentValidationResult) client.invoke(
            'POST', '/convert/validate/rar', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagDocumentValidationResult.class
        );
    }
    /**
     * Validate a TAR Tarball Archive file (TAR)
     * Validate a TAR tarball archive file (TAR)
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagDocumentValidationResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocumentValidationResult validateDocumentTarValidation(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagDocumentValidationResult) client.invoke(
            'POST', '/convert/validate/tar', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagDocumentValidationResult.class
        );
    }
    /**
     * Validate a Excel document (XLSX)
     * Validate a Excel document (XLSX); if the document is not valid, identifies the errors in the document
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagDocumentValidationResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocumentValidationResult validateDocumentXlsxValidation(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagDocumentValidationResult) client.invoke(
            'POST', '/convert/validate/xlsx', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagDocumentValidationResult.class
        );
    }
    /**
     * Validate an XML file
     * Validate an XML document file; if the document is not valid, identifies the errors in the document
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagDocumentValidationResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocumentValidationResult validateDocumentXmlValidation(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagDocumentValidationResult) client.invoke(
            'POST', '/convert/validate/xml', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagDocumentValidationResult.class
        );
    }
    /**
     * Validate a Zip Archive file (zip)
     * Validate a Zip archive file (ZIP)
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagDocumentValidationResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocumentValidationResult validateDocumentZipValidation(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagDocumentValidationResult) client.invoke(
            'POST', '/convert/validate/zip', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagDocumentValidationResult.class
        );
    }
}
