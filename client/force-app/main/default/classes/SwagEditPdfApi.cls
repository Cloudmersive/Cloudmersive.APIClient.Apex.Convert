/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagEditPdfApi {
    SwagClient client;

    public SwagEditPdfApi(SwagClient client) {
        this.client = client;
    }

    public SwagEditPdfApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Encrypt and password-protect a PDF
     * Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
     * @param inputFile Input file to perform the operation on. (required)
     * @param userPassword Password of a user (reader) of the PDF file (optional)
     * @param ownerPassword Password of a owner (creator/editor) of the PDF file (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfEncrypt(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/encrypt', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'userPassword' => (String) params.get('userPassword'),
                'ownerPassword' => (String) params.get('ownerPassword')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Encrypt, password-protect and set restricted permissions on a PDF
     * Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).
     * @param ownerPassword Password of a owner (creator/editor) of the PDF file (required) (required)
     * @param inputFile Input file to perform the operation on. (required)
     * @param userPassword Password of a user (reader) of the PDF file (optional) (optional)
     * @param allowPrinting Set to false to disable printing through DRM.  Default is true. (optional)
     * @param allowDocumentAssembly Set to false to disable document assembly through DRM.  Default is true. (optional)
     * @param allowContentExtraction Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true. (optional)
     * @param allowFormFilling Set to false to disable filling out form fields in the PDF through DRM.  Default is true. (optional)
     * @param allowEditing Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true. (optional)
     * @param allowAnnotations Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true. (optional)
     * @param allowDegradedPrinting Set to false to disable degraded printing of the PDF through DRM.  Default is true. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfSetPermissions(Map<String, Object> params) {
        client.assertNotNull(params.get('ownerPassword'), 'ownerPassword');
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/encrypt/set-permissions', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'ownerPassword' => (String) params.get('ownerPassword'),
                'userPassword' => (String) params.get('userPassword'),
                'allowPrinting' => (Boolean) params.get('allowPrinting'),
                'allowDocumentAssembly' => (Boolean) params.get('allowDocumentAssembly'),
                'allowContentExtraction' => (Boolean) params.get('allowContentExtraction'),
                'allowFormFilling' => (Boolean) params.get('allowFormFilling'),
                'allowEditing' => (Boolean) params.get('allowEditing'),
                'allowAnnotations' => (Boolean) params.get('allowAnnotations'),
                'allowDegradedPrinting' => (Boolean) params.get('allowDegradedPrinting')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Add a text watermark to a PDF
     * Adds a text watermark to a PDF
     * @param watermarkText Watermark text to add to the PDF (required) (required)
     * @param inputFile Input file to perform the operation on. (required)
     * @param fontName Font Family Name for the watermark text; default is Times New Roman (optional)
     * @param fontSize Font Size in points of the text; default is 150 (optional)
     * @param fontColor Font color in hexadecimal or HTML color name; default is Red (optional)
     * @param fontTransparency Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5 (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfWatermarkText(Map<String, Object> params) {
        client.assertNotNull(params.get('watermarkText'), 'watermarkText');
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/watermark/text', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'watermarkText' => (String) params.get('watermarkText'),
                'fontName' => (String) params.get('fontName'),
                'fontSize' => (Double) params.get('fontSize'),
                'fontColor' => (String) params.get('fontColor'),
                'fontTransparency' => (Double) params.get('fontTransparency')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
}
