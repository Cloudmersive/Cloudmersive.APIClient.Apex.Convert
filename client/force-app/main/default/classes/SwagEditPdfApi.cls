/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagEditPdfApi {
    SwagClient client;

    public SwagEditPdfApi(SwagClient client) {
        this.client = client;
    }

    public SwagEditPdfApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Add one or more PDF annotations, comments in the PDF document
     * Adds one or more annotations, comments to a PDF document.
     * @param request  (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfAddAnnotations(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/annotations/add-item',
            (SwagAddPdfAnnotationRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert a PDF file to PDF/A
     * Converts the input PDF file to a PDF/A-1b or PDF/A-2b standardized PDF.
     * @param inputFile Input file to perform the operation on. (required)
     * @param conformanceLevel Optional: Select the conformance level for PDF/A - specify \&#39;1b\&#39; for PDF/A-1b or specify \&#39;2b\&#39; for PDF/A-2b; default is PDF/A-1b (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfConvertToPdfA(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/optimize/pdf-a', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'conformanceLevel' => (String) params.get('conformanceLevel')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Decrypt and password-protect a PDF
     * Decrypt a PDF document with a password.  Decrypted PDF will no longer require a password to open.
     * @param password Valid password for the PDF file (required)
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfDecrypt(Map<String, Object> params) {
        client.assertNotNull(params.get('password'), 'password');
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/decrypt', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'password' => (String) params.get('password')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Remove, delete pages from a PDF document
     * Remove one or more pages from a PDF document
     * @param inputFile Input file to perform the operation on. (required)
     * @param pageStart Page number (1 based) to start deleting pages from (inclusive). (required)
     * @param pageEnd Page number (1 based) to stop deleting pages from (inclusive). (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfDeletePages(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        client.assertNotNull(params.get('pageStart'), 'pageStart');
        client.assertNotNull(params.get('pageEnd'), 'pageEnd');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/pages/delete', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'pageStart' => (Integer) params.get('pageStart'),
                'pageEnd' => (Integer) params.get('pageEnd')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Remove, delete pages from a PDF document as Batch Job
     * Remove one or more pages from a PDF document.  Runs as a batch job async and returns a batch job ID that you can check the status of to get the result.  Requires Cloudmersive Private Cloud or Managed Instance.
     * @param inputFile Input file to perform the operation on. (required)
     * @param pageStart Page number (1 based) to start deleting pages from (inclusive). (required)
     * @param pageEnd Page number (1 based) to stop deleting pages from (inclusive). (required)
     * @return SwagEditPdfBatchJobCreateResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagEditPdfBatchJobCreateResult editPdfDeletePagesBatchJob(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        client.assertNotNull(params.get('pageStart'), 'pageStart');
        client.assertNotNull(params.get('pageEnd'), 'pageEnd');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagEditPdfBatchJobCreateResult) client.invoke(
            'POST', '/convert/edit/pdf/pages/delete/batch-job', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'pageStart' => (Integer) params.get('pageStart'),
                'pageEnd' => (Integer) params.get('pageEnd')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagEditPdfBatchJobCreateResult.class
        );
    }
    /**
     * Encrypt and password-protect a PDF
     * Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
     * @param inputFile Input file to perform the operation on. (required)
     * @param userPassword Password of a user (reader) of the PDF file (optional)
     * @param ownerPassword Password of a owner (creator/editor) of the PDF file (optional)
     * @param encryptionKeyLength Possible values are &quot;128&quot; (128-bit RC4 encryption) and &quot;256&quot; (256-bit AES encryption).  Default is 256. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfEncrypt(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/encrypt', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'userPassword' => (String) params.get('userPassword'),
                'ownerPassword' => (String) params.get('ownerPassword'),
                'encryptionKeyLength' => (String) params.get('encryptionKeyLength')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Get PDF annotations, including comments in the document
     * Enumerates the annotations, including comments and notes, in a PDF document.
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagGetPdfAnnotationsResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetPdfAnnotationsResult editPdfGetAnnotations(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagGetPdfAnnotationsResult) client.invoke(
            'POST', '/convert/edit/pdf/annotations/list', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagGetPdfAnnotationsResult.class
        );
    }
    /**
     * Get the status and result of a PDF Batch Job
     * Returns the result of the Async Job - possible states can be STARTED or COMPLETED.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
     * @param asyncJobID  (required)
     * @return SwagEditPdfJobStatusResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagEditPdfJobStatusResult editPdfGetAsyncJobStatus(Map<String, Object> params) {
        client.assertNotNull(params.get('asyncJobID'), 'asyncJobID');
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('AsyncJobID', (String) params.get('asyncJobID')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagEditPdfJobStatusResult) client.invoke(
            'GET', '/convert/edit/pdf/batch-job/status', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagEditPdfJobStatusResult.class
        );
    }
    /**
     * Gets PDF Form fields and values
     * Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagPdfFormFields
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagPdfFormFields editPdfGetFormFields(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagPdfFormFields) client.invoke(
            'POST', '/convert/edit/pdf/form/get-fields', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagPdfFormFields.class
        );
    }
    /**
     * Get PDF document metadata
     * Returns the metadata from the PDF document, including Title, Author, etc.
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagPdfMetadata
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagPdfMetadata editPdfGetMetadata(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagPdfMetadata) client.invoke(
            'POST', '/convert/edit/pdf/get-metadata', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagPdfMetadata.class
        );
    }
    /**
     * Get text in a PDF document by page
     * Gets the text in a PDF by page
     * @param inputFile Input file to perform the operation on. (required)
     * @param textFormattingMode Optional; specify how whitespace should be handled when converting the document to text.  Possible values are \&#39;preserveWhitespace\&#39; which will attempt to preserve whitespace in the document and relative positioning of text within the document, and \&#39;minimizeWhitespace\&#39; which will not insert additional spaces into the document in most cases.  Default is \&#39;preserveWhitespace\&#39;. (optional)
     * @return SwagPdfTextByPageResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagPdfTextByPageResult editPdfGetPdfTextByPages(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagPdfTextByPageResult) client.invoke(
            'POST', '/convert/edit/pdf/pages/get-text', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'textFormattingMode' => (String) params.get('textFormattingMode')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagPdfTextByPageResult.class
        );
    }
    /**
     * Insert, copy pages from one PDF document into another
     * Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document).
     * @param sourceFile Source PDF file to copy pages from. (required)
     * @param destinationFile Destination PDF file to copy pages into. (required)
     * @param pageStartSource Page number (1 based) to start copying pages from (inclusive) in the Source file. (required)
     * @param pageEndSource Page number (1 based) to stop copying pages pages from (inclusive) in the Source file. (required)
     * @param pageInsertBeforeDesitnation Page number (1 based) to insert the pages before in the Destination file. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfInsertPages(Map<String, Object> params) {
        client.assertNotNull(params.get('sourceFile'), 'sourceFile');
        client.assertNotNull(params.get('destinationFile'), 'destinationFile');
        client.assertNotNull(params.get('pageStartSource'), 'pageStartSource');
        client.assertNotNull(params.get('pageEndSource'), 'pageEndSource');
        client.assertNotNull(params.get('pageInsertBeforeDesitnation'), 'pageInsertBeforeDesitnation');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('sourceFile', (Blob) params.get('sourceFile')));
        form.addAll(client.makeParam('destinationFile', (Blob) params.get('destinationFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/pages/insert', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'pageStartSource' => (Integer) params.get('pageStartSource'),
                'pageEndSource' => (Integer) params.get('pageEndSource'),
                'pageInsertBeforeDesitnation' => (Integer) params.get('pageInsertBeforeDesitnation')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Insert, copy pages from one PDF document into another as a batch job
     * Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document).  Runs as a batch job async and returns a batch job ID that you can check the status of to get the result.  Requires Cloudmersive Private Cloud or Managed Instance.
     * @param sourceFile Source PDF file to copy pages from. (required)
     * @param destinationFile Destination PDF file to copy pages into. (required)
     * @param pageStartSource Page number (1 based) to start copying pages from (inclusive) in the Source file. (required)
     * @param pageEndSource Page number (1 based) to stop copying pages pages from (inclusive) in the Source file. (required)
     * @param pageInsertBeforeDesitnation Page number (1 based) to insert the pages before in the Destination file. (required)
     * @return SwagEditPdfBatchJobCreateResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagEditPdfBatchJobCreateResult editPdfInsertPagesBatchJob(Map<String, Object> params) {
        client.assertNotNull(params.get('sourceFile'), 'sourceFile');
        client.assertNotNull(params.get('destinationFile'), 'destinationFile');
        client.assertNotNull(params.get('pageStartSource'), 'pageStartSource');
        client.assertNotNull(params.get('pageEndSource'), 'pageEndSource');
        client.assertNotNull(params.get('pageInsertBeforeDesitnation'), 'pageInsertBeforeDesitnation');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('sourceFile', (Blob) params.get('sourceFile')));
        form.addAll(client.makeParam('destinationFile', (Blob) params.get('destinationFile')));

        return (SwagEditPdfBatchJobCreateResult) client.invoke(
            'POST', '/convert/edit/pdf/pages/insert/batch-job', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'pageStartSource' => (Integer) params.get('pageStartSource'),
                'pageEndSource' => (Integer) params.get('pageEndSource'),
                'pageInsertBeforeDesitnation' => (Integer) params.get('pageInsertBeforeDesitnation')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagEditPdfBatchJobCreateResult.class
        );
    }
    /**
     * Linearize and optimize a PDF for streaming download
     * Linearizes the content of a PDF to optimize it for streaming download, particularly over web streaming.
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfLinearize(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/optimize/linearize', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Rasterize a PDF to an image-based PDF
     * Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.
     * @param inputFile Input file to perform the operation on. (required)
     * @param dpi Optional; configures the pixel density in Dots per Inch (DPI) (default is 300).  This parameter can only be used with Cloudmersive Managed Instance and Private Cloud. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfRasterize(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/rasterize', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'dpi' => (Integer) params.get('dpi')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Rasterize a PDF to an image-based PDF as Batch Job
     * Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagEditPdfBatchJobCreateResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagEditPdfBatchJobCreateResult editPdfRasterizeBatchJob(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagEditPdfBatchJobCreateResult) client.invoke(
            'POST', '/convert/edit/pdf/rasterize/batch-job', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagEditPdfBatchJobCreateResult.class
        );
    }
    /**
     * Reduce the file size and optimize a PDF
     * Reduces the file size and optimizes the content of a PDF to minimize its file size.
     * @param inputFile Input file to perform the operation on. (required)
     * @param quality Quality level for the images in the PDF, ranging from 0.0 (low quality) to 1.0 (high quality); default is 0.3 (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfReduceFileSize(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/optimize/reduce-file-size', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'quality' => (Double) params.get('quality')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Remove all PDF annotations, including comments in the document
     * Removes all of the annotations, including comments and notes, in a PDF document.
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfRemoveAllAnnotations(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/annotations/remove-all', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Remove a specific PDF annotation, comment in the document
     * Removes a specific annotation in a PDF document, using the AnnotationIndex.  To enumerate AnnotationIndex for all of the annotations in the PDF document, use the /edit/pdf/annotations/list API.
     * @param inputFile Input file to perform the operation on. (required)
     * @param annotationIndex The 0-based index of the annotation in the document (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfRemoveAnnotationItem(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        client.assertNotNull(params.get('annotationIndex'), 'annotationIndex');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/annotations/remove-item', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'annotationIndex' => (Integer) params.get('annotationIndex')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Change PDF Document\&#39;s Paper Size
     * Resizes a PDF document\&#39;s paper size.
     * @param inputFile Input file to perform the operation on. (required)
     * @param paperSize The desired paper size for the resized PDF document. Size ranges from A7 (smallest) to A0 (largest). (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfResize(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        client.assertNotNull(params.get('paperSize'), 'paperSize');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/resize', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'paperSize' => (String) params.get('paperSize')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Rotate all pages in a PDF document
     * Rotate all of the pages in a PDF document by a multiple of 90 degrees
     * @param inputFile Input file to perform the operation on. (required)
     * @param rotationAngle The angle to rotate the page in degrees, must be a multiple of 90 degrees, e.g. 90, 180, 270, or -90, -180, -270, etc. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfRotateAllPages(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        client.assertNotNull(params.get('rotationAngle'), 'rotationAngle');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/pages/rotate/all', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'rotationAngle' => (Integer) params.get('rotationAngle')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Rotate a range, subset of pages in a PDF document
     * Rotate a range of specific pages in a PDF document by a multiple of 90 degrees
     * @param inputFile Input file to perform the operation on. (required)
     * @param rotationAngle The angle to rotate the page in degrees, must be a multiple of 90 degrees, e.g. 90, 180, 270, or -90, -180, -270, etc. (required)
     * @param pageStart Page number (1 based) to start rotating pages from (inclusive). (required)
     * @param pageEnd Page number (1 based) to stop rotating pages from (inclusive). (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfRotatePageRange(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        client.assertNotNull(params.get('rotationAngle'), 'rotationAngle');
        client.assertNotNull(params.get('pageStart'), 'pageStart');
        client.assertNotNull(params.get('pageEnd'), 'pageEnd');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/pages/rotate/page-range', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'rotationAngle' => (Integer) params.get('rotationAngle'),
                'pageStart' => (Integer) params.get('pageStart'),
                'pageEnd' => (Integer) params.get('pageEnd')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Sets ands fills PDF Form field values
     * Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form.
     * @param fieldValues  (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfSetFormFields(Map<String, Object> params) {
        client.assertNotNull(params.get('fieldValues'), 'fieldValues');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/form/set-fields',
            (SwagSetPdfFormFieldsRequest) params.get('fieldValues'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Sets PDF document metadata
     * Sets (writes) metadata into the input PDF document, including Title, Author, etc.
     * @param request  (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfSetMetadata(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/set-metadata',
            (SwagSetPdfMetadataRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Encrypt, password-protect and set restricted permissions on a PDF
     * Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).
     * @param ownerPassword Password of a owner (creator/editor) of the PDF file (required) (required)
     * @param userPassword Password of a user (reader) of the PDF file (optional) (required)
     * @param inputFile Input file to perform the operation on. (required)
     * @param encryptionKeyLength Possible values are &quot;128&quot; (128-bit RC4 encryption) and &quot;256&quot; (256-bit AES encryption).  Default is 256. (optional)
     * @param allowPrinting Set to false to disable printing through DRM.  Default is true. (optional)
     * @param allowDocumentAssembly Set to false to disable document assembly through DRM.  Default is true. (optional)
     * @param allowContentExtraction Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true. (optional)
     * @param allowFormFilling Set to false to disable filling out form fields in the PDF through DRM.  Default is true. (optional)
     * @param allowEditing Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true. (optional)
     * @param allowAnnotations Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true. (optional)
     * @param allowDegradedPrinting Set to false to disable degraded printing of the PDF through DRM.  Default is true. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfSetPermissions(Map<String, Object> params) {
        client.assertNotNull(params.get('ownerPassword'), 'ownerPassword');
        client.assertNotNull(params.get('userPassword'), 'userPassword');
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/encrypt/set-permissions', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'ownerPassword' => (String) params.get('ownerPassword'),
                'userPassword' => (String) params.get('userPassword'),
                'encryptionKeyLength' => (String) params.get('encryptionKeyLength'),
                'allowPrinting' => (Boolean) params.get('allowPrinting'),
                'allowDocumentAssembly' => (Boolean) params.get('allowDocumentAssembly'),
                'allowContentExtraction' => (Boolean) params.get('allowContentExtraction'),
                'allowFormFilling' => (Boolean) params.get('allowFormFilling'),
                'allowEditing' => (Boolean) params.get('allowEditing'),
                'allowAnnotations' => (Boolean) params.get('allowAnnotations'),
                'allowDegradedPrinting' => (Boolean) params.get('allowDegradedPrinting')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Add a text watermark to a PDF
     * Adds a text watermark to a PDF
     * @param watermarkText Watermark text to add to the PDF (required) (required)
     * @param inputFile Input file to perform the operation on. (required)
     * @param fontName Font Family Name for the watermark text; default is Times New Roman (optional)
     * @param fontSize Font Size in points of the text; default is 150 (optional)
     * @param fontColor Font color in hexadecimal or HTML color name; default is Red (optional)
     * @param fontTransparency Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5 (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editPdfWatermarkText(Map<String, Object> params) {
        client.assertNotNull(params.get('watermarkText'), 'watermarkText');
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/pdf/watermark/text', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'watermarkText' => (String) params.get('watermarkText'),
                'fontName' => (String) params.get('fontName'),
                'fontSize' => (Double) params.get('fontSize'),
                'fontColor' => (String) params.get('fontColor'),
                'fontTransparency' => (Double) params.get('fontTransparency')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
}
