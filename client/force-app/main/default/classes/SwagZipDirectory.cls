/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Representation of a directory in a zip file
 */
public class SwagZipDirectory implements Swagger.MappedProperties {
    /**
     * Name of this directory
     * @return directoryName
     */
    public String directoryName { get; set; }

    /**
     * Child directories contained directly in this directory
     * @return directoriesInDirectory
     */
    public List<SwagZipDirectory> directoriesInDirectory { get; set; }

    /**
     * Child files contained directly in this directory
     * @return filesInDirectory
     */
    public List<SwagZipFile> filesInDirectory { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'DirectoryName' => 'directoryName',
        'DirectoriesInDirectory' => 'directoriesInDirectory',
        'FilesInDirectory' => 'filesInDirectory'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public SwagZipDirectory() {
        directoriesInDirectory = new List<SwagZipDirectory>();
        filesInDirectory = new List<SwagZipFile>();
    }

    public static SwagZipDirectory getExample() {
        SwagZipDirectory zipDirectory = new SwagZipDirectory();
        zipDirectory.directoryName = 'aeiou';
        zipDirectory.directoriesInDirectory = new List<SwagZipDirectory>{SwagZipDirectory.getExample()};
        zipDirectory.filesInDirectory = new List<SwagZipFile>{SwagZipFile.getExample()};
        return zipDirectory;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagZipDirectory) {
            SwagZipDirectory zipDirectory = (SwagZipDirectory) obj;
            return this.directoryName == zipDirectory.directoryName
                && this.directoriesInDirectory == zipDirectory.directoriesInDirectory
                && this.filesInDirectory == zipDirectory.filesInDirectory;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (directoryName == null ? 0 : System.hashCode(directoryName));
        hashCode = (17 * hashCode) + (directoriesInDirectory == null ? 0 : System.hashCode(directoriesInDirectory));
        hashCode = (17 * hashCode) + (filesInDirectory == null ? 0 : System.hashCode(filesInDirectory));
        return hashCode;
    }
}

