/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * SwagDocxImage
 */
public class SwagDocxImage implements Swagger.MappedProperties {
    /**
     * The Path of the location of this object; leave blank for new tables
     * @return path
     */
    public String path { get; set; }

    /**
     * The Name of the image
     * @return imageName
     */
    public String imageName { get; set; }

    /**
     * The Id of the image
     * @return imageId
     */
    public Long imageId { get; set; }

    /**
     * The Description of the image
     * @return imageDescription
     */
    public String imageDescription { get; set; }

    /**
     * Width of the image in EMUs (English Metric Units); set to 0 to default to page width and aspect-ratio based height
     * @return imageWidth
     */
    public Long imageWidth { get; set; }

    /**
     * Height of the image in EMUs (English Metric Units); set to 0 to default to page width and aspect-ratio based height
     * @return imageHeight
     */
    public Long imageHeight { get; set; }

    /**
     * X (horizontal) offset of the image
     * @return xoffset
     */
    public Long xoffset { get; set; }

    /**
     * Y (vertical) offset of the image
     * @return yoffset
     */
    public Long yoffset { get; set; }

    /**
     * Read-only; internal ID for the image contents
     * @return imageDataEmbedId
     */
    public String imageDataEmbedId { get; set; }

    /**
     * Read-only; image data MIME content-type
     * @return imageDataContentType
     */
    public String imageDataContentType { get; set; }

    /**
     * Read-only; internal file name/path for the image
     * @return imageInternalFileName
     */
    public String imageInternalFileName { get; set; }

    /**
     * URL to the image contents; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the contents.
     * @return imageContentsURL
     */
    public String imageContentsURL { get; set; }

    /**
     * True if the image is inline with the text; false if it is floating
     * @return inlineWithText
     */
    public Boolean inlineWithText { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Path' => 'path',
        'ImageName' => 'imageName',
        'ImageId' => 'imageId',
        'ImageDescription' => 'imageDescription',
        'ImageWidth' => 'imageWidth',
        'ImageHeight' => 'imageHeight',
        'XOffset' => 'xoffset',
        'YOffset' => 'yoffset',
        'ImageDataEmbedId' => 'imageDataEmbedId',
        'ImageDataContentType' => 'imageDataContentType',
        'ImageInternalFileName' => 'imageInternalFileName',
        'ImageContentsURL' => 'imageContentsURL',
        'InlineWithText' => 'inlineWithText'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagDocxImage getExample() {
        SwagDocxImage docxImage = new SwagDocxImage();
        docxImage.path = 'aeiou';
        docxImage.imageName = 'aeiou';
        docxImage.imageId = 123456789L;
        docxImage.imageDescription = 'aeiou';
        docxImage.imageWidth = 123456789L;
        docxImage.imageHeight = 123456789L;
        docxImage.xoffset = 123456789L;
        docxImage.yoffset = 123456789L;
        docxImage.imageDataEmbedId = 'aeiou';
        docxImage.imageDataContentType = 'aeiou';
        docxImage.imageInternalFileName = 'aeiou';
        docxImage.imageContentsURL = 'aeiou';
        docxImage.inlineWithText = true;
        return docxImage;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagDocxImage) {
            SwagDocxImage docxImage = (SwagDocxImage) obj;
            return this.path == docxImage.path
                && this.imageName == docxImage.imageName
                && this.imageId == docxImage.imageId
                && this.imageDescription == docxImage.imageDescription
                && this.imageWidth == docxImage.imageWidth
                && this.imageHeight == docxImage.imageHeight
                && this.xoffset == docxImage.xoffset
                && this.yoffset == docxImage.yoffset
                && this.imageDataEmbedId == docxImage.imageDataEmbedId
                && this.imageDataContentType == docxImage.imageDataContentType
                && this.imageInternalFileName == docxImage.imageInternalFileName
                && this.imageContentsURL == docxImage.imageContentsURL
                && this.inlineWithText == docxImage.inlineWithText;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (path == null ? 0 : System.hashCode(path));
        hashCode = (17 * hashCode) + (imageName == null ? 0 : System.hashCode(imageName));
        hashCode = (17 * hashCode) + (imageId == null ? 0 : System.hashCode(imageId));
        hashCode = (17 * hashCode) + (imageDescription == null ? 0 : System.hashCode(imageDescription));
        hashCode = (17 * hashCode) + (imageWidth == null ? 0 : System.hashCode(imageWidth));
        hashCode = (17 * hashCode) + (imageHeight == null ? 0 : System.hashCode(imageHeight));
        hashCode = (17 * hashCode) + (xoffset == null ? 0 : System.hashCode(xoffset));
        hashCode = (17 * hashCode) + (yoffset == null ? 0 : System.hashCode(yoffset));
        hashCode = (17 * hashCode) + (imageDataEmbedId == null ? 0 : System.hashCode(imageDataEmbedId));
        hashCode = (17 * hashCode) + (imageDataContentType == null ? 0 : System.hashCode(imageDataContentType));
        hashCode = (17 * hashCode) + (imageInternalFileName == null ? 0 : System.hashCode(imageInternalFileName));
        hashCode = (17 * hashCode) + (imageContentsURL == null ? 0 : System.hashCode(imageContentsURL));
        hashCode = (17 * hashCode) + (inlineWithText == null ? 0 : System.hashCode(inlineWithText));
        return hashCode;
    }
}

