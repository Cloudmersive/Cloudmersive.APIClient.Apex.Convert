/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * A cell in a Word Document (DOCX) file
 */
public class SwagDocxTableCell implements Swagger.MappedProperties {
    /**
     * The index of the cell, 0-based
     * @return cellIndex
     */
    public Integer cellIndex { get; set; }

    /**
     * The Path of the location of this object; leave blank for new tables
     * @return path
     */
    public String path { get; set; }

    /**
     * Paragraphs inside the cell; this is where the contents of the cell are stored
     * @return paragraphs
     */
    public List<SwagDocxParagraph> paragraphs { get; set; }

    /**
     * Color of the cell shading
     * @return cellShadingColor
     */
    public String cellShadingColor { get; set; }

    /**
     * Fill of the cell shading
     * @return cellShadingFill
     */
    public String cellShadingFill { get; set; }

    /**
     * Pattern of the cell shading
     * @return cellShadingPattern
     */
    public String cellShadingPattern { get; set; }

    /**
     * Width mode of the cell; can be auto (for automatic) or manual
     * @return cellWidthMode
     */
    public String cellWidthMode { get; set; }

    /**
     * Width of the cell
     * @return cellWidth
     */
    public String cellWidth { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'CellIndex' => 'cellIndex',
        'Path' => 'path',
        'Paragraphs' => 'paragraphs',
        'CellShadingColor' => 'cellShadingColor',
        'CellShadingFill' => 'cellShadingFill',
        'CellShadingPattern' => 'cellShadingPattern',
        'CellWidthMode' => 'cellWidthMode',
        'CellWidth' => 'cellWidth'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public SwagDocxTableCell() {
        paragraphs = new List<SwagDocxParagraph>();
    }

    public static SwagDocxTableCell getExample() {
        SwagDocxTableCell docxTableCell = new SwagDocxTableCell();
        docxTableCell.cellIndex = 123;
        docxTableCell.path = 'aeiou';
        docxTableCell.paragraphs = new List<SwagDocxParagraph>{SwagDocxParagraph.getExample()};
        docxTableCell.cellShadingColor = 'aeiou';
        docxTableCell.cellShadingFill = 'aeiou';
        docxTableCell.cellShadingPattern = 'aeiou';
        docxTableCell.cellWidthMode = 'aeiou';
        docxTableCell.cellWidth = 'aeiou';
        return docxTableCell;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagDocxTableCell) {
            SwagDocxTableCell docxTableCell = (SwagDocxTableCell) obj;
            return this.cellIndex == docxTableCell.cellIndex
                && this.path == docxTableCell.path
                && this.paragraphs == docxTableCell.paragraphs
                && this.cellShadingColor == docxTableCell.cellShadingColor
                && this.cellShadingFill == docxTableCell.cellShadingFill
                && this.cellShadingPattern == docxTableCell.cellShadingPattern
                && this.cellWidthMode == docxTableCell.cellWidthMode
                && this.cellWidth == docxTableCell.cellWidth;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (cellIndex == null ? 0 : System.hashCode(cellIndex));
        hashCode = (17 * hashCode) + (path == null ? 0 : System.hashCode(path));
        hashCode = (17 * hashCode) + (paragraphs == null ? 0 : System.hashCode(paragraphs));
        hashCode = (17 * hashCode) + (cellShadingColor == null ? 0 : System.hashCode(cellShadingColor));
        hashCode = (17 * hashCode) + (cellShadingFill == null ? 0 : System.hashCode(cellShadingFill));
        hashCode = (17 * hashCode) + (cellShadingPattern == null ? 0 : System.hashCode(cellShadingPattern));
        hashCode = (17 * hashCode) + (cellWidthMode == null ? 0 : System.hashCode(cellWidthMode));
        hashCode = (17 * hashCode) + (cellWidth == null ? 0 : System.hashCode(cellWidth));
        return hashCode;
    }
}

