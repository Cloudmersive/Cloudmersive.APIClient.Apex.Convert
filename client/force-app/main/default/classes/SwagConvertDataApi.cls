/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagConvertDataApi {
    SwagClient client;

    public SwagConvertDataApi(SwagClient client) {
        this.client = client;
    }

    public SwagConvertDataApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Convert CSV to JSON conversion
     * Convert a CSV file to a JSON object array
     * @param inputFile Input file to perform the operation on. (required)
     * @param columnNamesFromFirstRow Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
     * @return Object
     * @throws Swagger.ApiException if fails to make API call
     */
    public Object convertDataCsvToJson(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Object) client.invoke(
            'POST', '/convert/csv/to/json', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'columnNamesFromFirstRow' => (Boolean) params.get('columnNamesFromFirstRow')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Object.class
        );
    }
    /**
     * Convert CSV to XML conversion
     * Convert a CSV file to a XML file
     * @param inputFile Input file to perform the operation on. (required)
     * @param columnNamesFromFirstRow Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDataCsvToXml(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/csv/to/xml', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'columnNamesFromFirstRow' => (Boolean) params.get('columnNamesFromFirstRow')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert JSON String to XML conversion
     * Convert a JSON object into XML
     * @param jsonString Input JSON String to convert to XML (required)
     * @return Object
     * @throws Swagger.ApiException if fails to make API call
     */
    public Object convertDataJsonStringToXml(Map<String, Object> params) {
        client.assertNotNull(params.get('jsonString'), 'jsonString');
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('JsonString', (String) params.get('jsonString')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Object) client.invoke(
            'POST', '/convert/json-string/to/xml', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Object.class
        );
    }
    /**
     * Convert JSON Object to XML conversion
     * Convert a JSON object into XML
     * @param jsonObject Input JSON Object to convert to XML (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDataJsonToXml(Map<String, Object> params) {
        client.assertNotNull(params.get('jsonObject'), 'jsonObject');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/json/to/xml',
            (Object) params.get('jsonObject'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Excel (97-2003) XLS to JSON conversion
     * Convert an Excel (97-2003) XLS file to a JSON object array
     * @param inputFile Input file to perform the operation on. (required)
     * @return Object
     * @throws Swagger.ApiException if fails to make API call
     */
    public Object convertDataXlsToJson(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Object) client.invoke(
            'POST', '/convert/xls/to/json', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Object.class
        );
    }
    /**
     * Convert Excel XLSX to JSON conversion
     * Convert an Excel XLSX file to a JSON object array
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDataXlsxToJson(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/xlsx/to/json', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Excel XLSX to XML conversion
     * Convert an Excel XLSX file to a XML file
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDataXlsxToXml(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/xlsx/to/xml', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Adds an attribute to all XML nodes matching XPath expression
     * Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlAttributeName Name of the XML attribute to add (required)
     * @param xmlAttributeValue Value of the XML attribute to add (required)
     * @return SwagXmlAddAttributeWithXPathResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagXmlAddAttributeWithXPathResult convertDataXmlEditAddAttributeWithXPath(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        client.assertNotNull(params.get('xpathExpression'), 'xpathExpression');
        client.assertNotNull(params.get('xmlAttributeName'), 'xmlAttributeName');
        client.assertNotNull(params.get('xmlAttributeValue'), 'xmlAttributeValue');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagXmlAddAttributeWithXPathResult) client.invoke(
            'POST', '/convert/xml/edit/xpath/add-attribute', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'XPathExpression' => (String) params.get('xpathExpression'),
                'XmlAttributeName' => (String) params.get('xmlAttributeName'),
                'XmlAttributeValue' => (String) params.get('xmlAttributeValue')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagXmlAddAttributeWithXPathResult.class
        );
    }
    /**
     * Adds an XML node as a child to XML nodes matching XPath expression
     * Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlNodeToAdd XML Node to add as a child (required)
     * @return SwagXmlAddChildWithXPathResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagXmlAddChildWithXPathResult convertDataXmlEditAddChildWithXPath(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        client.assertNotNull(params.get('xpathExpression'), 'xpathExpression');
        client.assertNotNull(params.get('xmlNodeToAdd'), 'xmlNodeToAdd');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagXmlAddChildWithXPathResult) client.invoke(
            'POST', '/convert/xml/edit/xpath/add-child', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'XPathExpression' => (String) params.get('xpathExpression'),
                'XmlNodeToAdd' => (String) params.get('xmlNodeToAdd')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagXmlAddChildWithXPathResult.class
        );
    }
    /**
     * Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes
     * Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @return SwagXmlRemoveAllChildrenWithXPathRes
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagXmlRemoveAllChildrenWithXPathRes convertDataXmlEditRemoveAllChildNodesWithXPath(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        client.assertNotNull(params.get('xpathExpression'), 'xpathExpression');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagXmlRemoveAllChildrenWithXPathRes) client.invoke(
            'POST', '/convert/xml/edit/xpath/remove-all-children', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'XPathExpression' => (String) params.get('xpathExpression')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagXmlRemoveAllChildrenWithXPathRes.class
        );
    }
    /**
     * Replaces XML nodes matching XPath expression with new node
     * Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlNodeReplacement XML Node replacement content (required)
     * @return SwagXmlReplaceWithXPathResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagXmlReplaceWithXPathResult convertDataXmlEditReplaceWithXPath(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        client.assertNotNull(params.get('xpathExpression'), 'xpathExpression');
        client.assertNotNull(params.get('xmlNodeReplacement'), 'xmlNodeReplacement');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagXmlReplaceWithXPathResult) client.invoke(
            'POST', '/convert/xml/edit/xpath/replace', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'XPathExpression' => (String) params.get('xpathExpression'),
                'XmlNodeReplacement' => (String) params.get('xmlNodeReplacement')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagXmlReplaceWithXPathResult.class
        );
    }
    /**
     * Sets the value contents of XML nodes matching XPath expression
     * Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlValue XML Value to set into the matching XML nodes (required)
     * @return SwagXmlSetValueWithXPathResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagXmlSetValueWithXPathResult convertDataXmlEditSetValueWithXPath(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        client.assertNotNull(params.get('xpathExpression'), 'xpathExpression');
        client.assertNotNull(params.get('xmlValue'), 'xmlValue');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagXmlSetValueWithXPathResult) client.invoke(
            'POST', '/convert/xml/edit/xpath/set-value', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'XPathExpression' => (String) params.get('xpathExpression'),
                'XmlValue' => (String) params.get('xmlValue')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagXmlSetValueWithXPathResult.class
        );
    }
    /**
     * Filter, select XML nodes using XPath expression, get results
     * Return the reuslts of filtering, selecting an XML document with an XPath expression
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagXmlFilterWithXPathResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagXmlFilterWithXPathResult convertDataXmlFilterWithXPath(Map<String, Object> params) {
        client.assertNotNull(params.get('xpathExpression'), 'xpathExpression');
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagXmlFilterWithXPathResult) client.invoke(
            'POST', '/convert/xml/select/xpath', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'XPathExpression' => (String) params.get('xpathExpression')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagXmlFilterWithXPathResult.class
        );
    }
    /**
     * Query an XML file using XQuery query, get results
     * Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xquery Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     * @return SwagXmlQueryWithXQueryResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagXmlQueryWithXQueryResult convertDataXmlQueryWithXQuery(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        client.assertNotNull(params.get('xquery'), 'xquery');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagXmlQueryWithXQueryResult) client.invoke(
            'POST', '/convert/xml/query/xquery', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'XQuery' => (String) params.get('xquery')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagXmlQueryWithXQueryResult.class
        );
    }
    /**
     * Query multiple XML files using XQuery query, get results
     * Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(&quot;books.xml&quot;) or doc(&quot;restaurants.xml&quot;) if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.
     * @param inputFile1 First input XML file to perform the operation on. (required)
     * @param xquery Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     * @param inputFile2 Second input XML file to perform the operation on. (optional)
     * @param inputFile3 Third input XML file to perform the operation on. (optional)
     * @param inputFile4 Fourth input XML file to perform the operation on. (optional)
     * @param inputFile5 Fifth input XML file to perform the operation on. (optional)
     * @param inputFile6 Sixth input XML file to perform the operation on. (optional)
     * @param inputFile7 Seventh input XML file to perform the operation on. (optional)
     * @param inputFile8 Eighth input XML file to perform the operation on. (optional)
     * @param inputFile9 Ninth input XML file to perform the operation on. (optional)
     * @param inputFile10 Tenth input XML file to perform the operation on. (optional)
     * @return SwagXmlQueryWithXQueryMultiResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagXmlQueryWithXQueryMultiResult convertDataXmlQueryWithXQueryMulti(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile1'), 'inputFile1');
        client.assertNotNull(params.get('xquery'), 'xquery');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile1', (Blob) params.get('inputFile1')));
        form.addAll(client.makeParam('inputFile2', (Blob) params.get('inputFile2')));
        form.addAll(client.makeParam('inputFile3', (Blob) params.get('inputFile3')));
        form.addAll(client.makeParam('inputFile4', (Blob) params.get('inputFile4')));
        form.addAll(client.makeParam('inputFile5', (Blob) params.get('inputFile5')));
        form.addAll(client.makeParam('inputFile6', (Blob) params.get('inputFile6')));
        form.addAll(client.makeParam('inputFile7', (Blob) params.get('inputFile7')));
        form.addAll(client.makeParam('inputFile8', (Blob) params.get('inputFile8')));
        form.addAll(client.makeParam('inputFile9', (Blob) params.get('inputFile9')));
        form.addAll(client.makeParam('inputFile10', (Blob) params.get('inputFile10')));

        return (SwagXmlQueryWithXQueryMultiResult) client.invoke(
            'POST', '/convert/xml/query/xquery/multi', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'XQuery' => (String) params.get('xquery')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagXmlQueryWithXQueryMultiResult.class
        );
    }
    /**
     * Remove, delete XML nodes and items matching XPath expression
     * Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagXmlRemoveWithXPathResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagXmlRemoveWithXPathResult convertDataXmlRemoveWithXPath(Map<String, Object> params) {
        client.assertNotNull(params.get('xpathExpression'), 'xpathExpression');
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagXmlRemoveWithXPathResult) client.invoke(
            'POST', '/convert/xml/edit/xpath/remove', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'XPathExpression' => (String) params.get('xpathExpression')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagXmlRemoveWithXPathResult.class
        );
    }
    /**
     * Convert XML to JSON conversion
     * Convert an XML string or file into JSON
     * @param inputFile Input file to perform the operation on. (required)
     * @return Object
     * @throws Swagger.ApiException if fails to make API call
     */
    public Object convertDataXmlToJson(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Object) client.invoke(
            'POST', '/convert/xml/to/json', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Object.class
        );
    }
    /**
     * Transform XML document file with XSLT into a new XML document
     * Convert an XML string or file into JSON
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param transformFile Input XSLT file to use to transform the input XML file. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDataXmlTransformWithXsltToXml(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        client.assertNotNull(params.get('transformFile'), 'transformFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));
        form.addAll(client.makeParam('transformFile', (Blob) params.get('transformFile')));

        return (Blob) client.invoke(
            'POST', '/convert/xml/transform/xslt/to/xml', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
}
