@isTest
private class SwagConvertWebApiTest {
    /**
     * Convert HTML to Word DOCX Document
     *
     * Convert HTML to Office Word Document (DOCX) format
     */
    @isTest
    private static void convertWebHtmlToDocxTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new SwaggerResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'inputRequest' => SwagHtmlToOfficeRequest.getExample()
        };

        SwagClient client;
        SwagConvertWebApi api;
        Blob response;
        Blob expectedResponse;

        client = new SwagClient();
        api = new SwagConvertWebApi(client);
        ((Swagger.ApiKeyAuth) client.getAuthentication('Apikey');
            client.setApiKey('foo-bar-api-key');

        res.setHeader('Content-Type', 'application/json');
        res.setBody('"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu"');
        expectedResponse = EncodingUtil.base64Decode('VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu');
        response = (Blob) api.convertWebHtmlToDocx(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * Convert HTML string to PDF
     *
     * Fully renders a website and returns a PDF of the HTML.  Javascript, HTML5, CSS and other advanced features are all supported.
     */
    @isTest
    private static void convertWebHtmlToPdfTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new SwaggerResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'input' => SwagHtmlToPdfRequest.getExample()
        };

        SwagClient client;
        SwagConvertWebApi api;
        Blob response;
        Blob expectedResponse;

        client = new SwagClient();
        api = new SwagConvertWebApi(client);
        ((Swagger.ApiKeyAuth) client.getAuthentication('Apikey');
            client.setApiKey('foo-bar-api-key');

        res.setHeader('Content-Type', 'application/json');
        res.setBody('"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu"');
        expectedResponse = EncodingUtil.base64Decode('VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu');
        response = (Blob) api.convertWebHtmlToPdf(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * Convert HTML string to PNG screenshot
     *
     * Fully renders a website and returns a PNG (screenshot) of the HTML.  Javascript, HTML5, CSS and other advanced features are all supported.
     */
    @isTest
    private static void convertWebHtmlToPngTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new SwaggerResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'input' => SwagHtmlToPngRequest.getExample()
        };

        SwagClient client;
        SwagConvertWebApi api;
        Blob response;
        Blob expectedResponse;

        client = new SwagClient();
        api = new SwagConvertWebApi(client);
        ((Swagger.ApiKeyAuth) client.getAuthentication('Apikey');
            client.setApiKey('foo-bar-api-key');

        res.setHeader('Content-Type', 'application/json');
        res.setBody('"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu"');
        expectedResponse = EncodingUtil.base64Decode('VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu');
        response = (Blob) api.convertWebHtmlToPng(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * Convert HTML string to text (txt)
     *
     * Converts an HTML string input into text (txt); extracts text from HTML
     */
    @isTest
    private static void convertWebHtmlToTxtTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new SwaggerResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'input' => SwagHtmlToTextRequest.getExample()
        };

        SwagClient client;
        SwagConvertWebApi api;
        SwagHtmlToTextResponse response;
        SwagHtmlToTextResponse expectedResponse;

        client = new SwagClient();
        api = new SwagConvertWebApi(client);
        ((Swagger.ApiKeyAuth) client.getAuthentication('Apikey');
            client.setApiKey('foo-bar-api-key');

        res.setHeader('Content-Type', 'application/json');
        res.setBody('{\r\n  "Successful" : true,\r\n  "TextContentResult" : "TextContentResult"\r\n}');
        expectedResponse = SwagHtmlToTextResponse.getExample();
        response = (SwagHtmlToTextResponse) api.convertWebHtmlToTxt(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * Convert Markdown to HTML
     *
     * Convert a markdown file (.md) to HTML
     */
    @isTest
    private static void convertWebMdToHtmlTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new SwaggerResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'inputFile' => Blob.valueOf('Sample text file\nContents')
        };

        SwagClient client;
        SwagConvertWebApi api;
        SwagHtmlMdResult response;
        SwagHtmlMdResult expectedResponse;

        client = new SwagClient();
        api = new SwagConvertWebApi(client);
        ((Swagger.ApiKeyAuth) client.getAuthentication('Apikey');
            client.setApiKey('foo-bar-api-key');

        res.setHeader('Content-Type', 'application/json');
        res.setBody('{\r\n  "Html" : "Html",\r\n  "Successful" : true\r\n}');
        expectedResponse = SwagHtmlMdResult.getExample();
        response = (SwagHtmlMdResult) api.convertWebMdToHtml(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * Convert a URL to PDF
     *
     * Fully renders a website and returns a PDF of the full page.  Javascript, HTML5, CSS and other advanced features are all supported.
     */
    @isTest
    private static void convertWebUrlToPdfTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new SwaggerResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'input' => SwagUrlToPdfRequest.getExample()
        };

        SwagClient client;
        SwagConvertWebApi api;
        Blob response;
        Blob expectedResponse;

        client = new SwagClient();
        api = new SwagConvertWebApi(client);
        ((Swagger.ApiKeyAuth) client.getAuthentication('Apikey');
            client.setApiKey('foo-bar-api-key');

        res.setHeader('Content-Type', 'application/json');
        res.setBody('"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu"');
        expectedResponse = EncodingUtil.base64Decode('VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu');
        response = (Blob) api.convertWebUrlToPdf(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * Take screenshot of URL
     *
     * Fully renders a website and returns a PNG screenshot of the full page image.  Javascript, HTML5, CSS and other advanced features are all supported.
     */
    @isTest
    private static void convertWebUrlToScreenshotTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new SwaggerResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'input' => SwagScreenshotRequest.getExample()
        };

        SwagClient client;
        SwagConvertWebApi api;
        Blob response;
        Blob expectedResponse;

        client = new SwagClient();
        api = new SwagConvertWebApi(client);
        ((Swagger.ApiKeyAuth) client.getAuthentication('Apikey');
            client.setApiKey('foo-bar-api-key');

        res.setHeader('Content-Type', 'application/json');
        res.setBody('"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu"');
        expectedResponse = EncodingUtil.base64Decode('VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu');
        response = (Blob) api.convertWebUrlToScreenshot(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * Convert website URL page to text (txt)
     *
     * Converts a website URL page into text (txt); extracts text from HTML
     */
    @isTest
    private static void convertWebUrlToTxtTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new SwaggerResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'input' => SwagUrlToTextRequest.getExample()
        };

        SwagClient client;
        SwagConvertWebApi api;
        SwagUrlToTextResponse response;
        SwagUrlToTextResponse expectedResponse;

        client = new SwagClient();
        api = new SwagConvertWebApi(client);
        ((Swagger.ApiKeyAuth) client.getAuthentication('Apikey');
            client.setApiKey('foo-bar-api-key');

        res.setHeader('Content-Type', 'application/json');
        res.setBody('{\r\n  "Successful" : true,\r\n  "TextContentResult" : "TextContentResult"\r\n}');
        expectedResponse = SwagUrlToTextResponse.getExample();
        response = (SwagUrlToTextResponse) api.convertWebUrlToTxt(params);
        System.assertEquals(expectedResponse, response);
    }
}