/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Input to a string replacement request
 */
public class SwagReplaceStringRequest implements Swagger.MappedProperties {
    /**
     * Optional: Bytes of the input file to operate on
     * @return inputFileBytes
     */
    public Blob inputFileBytes { get; set; }

    /**
     * Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
     * @return inputFileUrl
     */
    public String inputFileUrl { get; set; }

    /**
     * String to search for and match against, to be replaced
     * @return matchString
     */
    public String matchString { get; set; }

    /**
     * String to replace the matched values with
     * @return replaceString
     */
    public String replaceString { get; set; }

    /**
     * True if the case should be matched, false for case insensitive match
     * @return matchCase
     */
    public Boolean matchCase { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'InputFileBytes' => 'inputFileBytes',
        'InputFileUrl' => 'inputFileUrl',
        'MatchString' => 'matchString',
        'ReplaceString' => 'replaceString',
        'MatchCase' => 'matchCase'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagReplaceStringRequest getExample() {
        SwagReplaceStringRequest replaceStringRequest = new SwagReplaceStringRequest();
        replaceStringRequest.inputFileBytes = EncodingUtil.base64Decode('VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu');
        replaceStringRequest.inputFileUrl = 'aeiou';
        replaceStringRequest.matchString = 'aeiou';
        replaceStringRequest.replaceString = 'aeiou';
        replaceStringRequest.matchCase = true;
        return replaceStringRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagReplaceStringRequest) {
            SwagReplaceStringRequest replaceStringRequest = (SwagReplaceStringRequest) obj;
            return this.inputFileBytes == replaceStringRequest.inputFileBytes
                && this.inputFileUrl == replaceStringRequest.inputFileUrl
                && this.matchString == replaceStringRequest.matchString
                && this.replaceString == replaceStringRequest.replaceString
                && this.matchCase == replaceStringRequest.matchCase;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (inputFileBytes == null ? 0 : System.hashCode(inputFileBytes));
        hashCode = (17 * hashCode) + (inputFileUrl == null ? 0 : System.hashCode(inputFileUrl));
        hashCode = (17 * hashCode) + (matchString == null ? 0 : System.hashCode(matchString));
        hashCode = (17 * hashCode) + (replaceString == null ? 0 : System.hashCode(replaceString));
        hashCode = (17 * hashCode) + (matchCase == null ? 0 : System.hashCode(matchCase));
        return hashCode;
    }
}

