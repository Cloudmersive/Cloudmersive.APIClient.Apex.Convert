/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * A table in a Word Document (DOCX) file
 */
public class SwagDocxTable implements Swagger.MappedProperties {
    /**
     * The ID of the table; leave blank for new tables
     * @return tableID
     */
    public String tableID { get; set; }

    /**
     * The Path of the location of this object; leave blank for new tables
     * @return path
     */
    public String path { get; set; }

    /**
     * The Width of the table, or 0 if not specified
     * @return width
     */
    public String width { get; set; }

    /**
     * The Width configuration type of the table
     * @return widthType
     */
    public String widthType { get; set; }

    /**
     * Rows in the table; this is where the contents is located
     * @return tableRows
     */
    public List<SwagDocxTableRow> tableRows { get; set; }

    /**
     * Type for the top border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
     * @return topBorderType
     */
    public String topBorderType { get; set; }

    /**
     * Width of the border in points (1/72nd of an inch)
     * @return topBorderSize
     */
    public Integer topBorderSize { get; set; }

    /**
     * Spacing around the border in points (1/72nd of an inch)
     * @return topBorderSpace
     */
    public Integer topBorderSpace { get; set; }

    /**
     * HTML-style color hex value (do not include a #)
     * @return topBorderColor
     */
    public String topBorderColor { get; set; }

    /**
     * Type for the bottom border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
     * @return bottomBorderType
     */
    public String bottomBorderType { get; set; }

    /**
     * Width of the border in points (1/72nd of an inch)
     * @return bottomBorderSize
     */
    public Integer bottomBorderSize { get; set; }

    /**
     * Spacing around the border in points (1/72nd of an inch)
     * @return bottomBorderSpace
     */
    public Integer bottomBorderSpace { get; set; }

    /**
     * HTML-style color hex value (do not include a #)
     * @return bottomBorderColor
     */
    public String bottomBorderColor { get; set; }

    /**
     * Type for the left border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
     * @return leftBorderType
     */
    public String leftBorderType { get; set; }

    /**
     * Width of the border in points (1/72nd of an inch)
     * @return leftBorderSize
     */
    public Integer leftBorderSize { get; set; }

    /**
     * Spacing around the border in points (1/72nd of an inch)
     * @return leftBorderSpace
     */
    public Integer leftBorderSpace { get; set; }

    /**
     * HTML-style color hex value (do not include a #)
     * @return leftBorderColor
     */
    public String leftBorderColor { get; set; }

    /**
     * Type for the right border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
     * @return rightBorderType
     */
    public String rightBorderType { get; set; }

    /**
     * Width of the border in points (1/72nd of an inch)
     * @return rightBorderSize
     */
    public Integer rightBorderSize { get; set; }

    /**
     * Spacing around the border in points (1/72nd of an inch)
     * @return rightBorderSpace
     */
    public Integer rightBorderSpace { get; set; }

    /**
     * HTML-style color hex value (do not include a #)
     * @return rightBorderColor
     */
    public String rightBorderColor { get; set; }

    /**
     * Type for the cell horizontal border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
     * @return cellHorizontalBorderType
     */
    public String cellHorizontalBorderType { get; set; }

    /**
     * Width of the border in points (1/72nd of an inch)
     * @return cellHorizontalBorderSize
     */
    public Integer cellHorizontalBorderSize { get; set; }

    /**
     * Spacing around the border in points (1/72nd of an inch)
     * @return cellHorizontalBorderSpace
     */
    public Integer cellHorizontalBorderSpace { get; set; }

    /**
     * HTML-style color hex value (do not include a #)
     * @return cellHorizontalBorderColor
     */
    public String cellHorizontalBorderColor { get; set; }

    /**
     * Type for the cell vertical border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
     * @return cellVerticalBorderType
     */
    public String cellVerticalBorderType { get; set; }

    /**
     * Width of the border in points (1/72nd of an inch)
     * @return cellVerticalBorderSize
     */
    public Integer cellVerticalBorderSize { get; set; }

    /**
     * Spacing around the border in points (1/72nd of an inch)
     * @return cellVerticalBorderSpace
     */
    public Integer cellVerticalBorderSpace { get; set; }

    /**
     * HTML-style color hex value (do not include a #)
     * @return cellVerticalBorderColor
     */
    public String cellVerticalBorderColor { get; set; }

    /**
     * Type for the start border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
     * @return startBorderType
     */
    public String startBorderType { get; set; }

    /**
     * Width of the border in points (1/72nd of an inch)
     * @return startBorderSize
     */
    public Integer startBorderSize { get; set; }

    /**
     * Spacing around the border in points (1/72nd of an inch)
     * @return startBorderSpace
     */
    public Integer startBorderSpace { get; set; }

    /**
     * HTML-style color hex value (do not include a #)
     * @return startBorderColor
     */
    public String startBorderColor { get; set; }

    /**
     * Type for the end border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
     * @return endBorderType
     */
    public String endBorderType { get; set; }

    /**
     * Width of the border in points (1/72nd of an inch)
     * @return endBorderSize
     */
    public Integer endBorderSize { get; set; }

    /**
     * Spacing around the border in points (1/72nd of an inch)
     * @return endBorderSpace
     */
    public Integer endBorderSpace { get; set; }

    /**
     * HTML-style color hex value (do not include a #)
     * @return endBorderColor
     */
    public String endBorderColor { get; set; }

    /**
     * Table indentation type
     * @return tableIndentationMode
     */
    public String tableIndentationMode { get; set; }

    /**
     * Table indentation width
     * @return tableIndentationWidth
     */
    public Integer tableIndentationWidth { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'TableID' => 'tableID',
        'Path' => 'path',
        'Width' => 'width',
        'WidthType' => 'widthType',
        'TableRows' => 'tableRows',
        'TopBorderType' => 'topBorderType',
        'TopBorderSize' => 'topBorderSize',
        'TopBorderSpace' => 'topBorderSpace',
        'TopBorderColor' => 'topBorderColor',
        'BottomBorderType' => 'bottomBorderType',
        'BottomBorderSize' => 'bottomBorderSize',
        'BottomBorderSpace' => 'bottomBorderSpace',
        'BottomBorderColor' => 'bottomBorderColor',
        'LeftBorderType' => 'leftBorderType',
        'LeftBorderSize' => 'leftBorderSize',
        'LeftBorderSpace' => 'leftBorderSpace',
        'LeftBorderColor' => 'leftBorderColor',
        'RightBorderType' => 'rightBorderType',
        'RightBorderSize' => 'rightBorderSize',
        'RightBorderSpace' => 'rightBorderSpace',
        'RightBorderColor' => 'rightBorderColor',
        'CellHorizontalBorderType' => 'cellHorizontalBorderType',
        'CellHorizontalBorderSize' => 'cellHorizontalBorderSize',
        'CellHorizontalBorderSpace' => 'cellHorizontalBorderSpace',
        'CellHorizontalBorderColor' => 'cellHorizontalBorderColor',
        'CellVerticalBorderType' => 'cellVerticalBorderType',
        'CellVerticalBorderSize' => 'cellVerticalBorderSize',
        'CellVerticalBorderSpace' => 'cellVerticalBorderSpace',
        'CellVerticalBorderColor' => 'cellVerticalBorderColor',
        'StartBorderType' => 'startBorderType',
        'StartBorderSize' => 'startBorderSize',
        'StartBorderSpace' => 'startBorderSpace',
        'StartBorderColor' => 'startBorderColor',
        'EndBorderType' => 'endBorderType',
        'EndBorderSize' => 'endBorderSize',
        'EndBorderSpace' => 'endBorderSpace',
        'EndBorderColor' => 'endBorderColor',
        'TableIndentationMode' => 'tableIndentationMode',
        'TableIndentationWidth' => 'tableIndentationWidth'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public SwagDocxTable() {
        tableRows = new List<SwagDocxTableRow>();
    }

    public static SwagDocxTable getExample() {
        SwagDocxTable docxTable = new SwagDocxTable();
        docxTable.tableID = 'aeiou';
        docxTable.path = 'aeiou';
        docxTable.width = 'aeiou';
        docxTable.widthType = 'aeiou';
        docxTable.tableRows = new List<SwagDocxTableRow>{SwagDocxTableRow.getExample()};
        docxTable.topBorderType = 'aeiou';
        docxTable.topBorderSize = 123;
        docxTable.topBorderSpace = 123;
        docxTable.topBorderColor = 'aeiou';
        docxTable.bottomBorderType = 'aeiou';
        docxTable.bottomBorderSize = 123;
        docxTable.bottomBorderSpace = 123;
        docxTable.bottomBorderColor = 'aeiou';
        docxTable.leftBorderType = 'aeiou';
        docxTable.leftBorderSize = 123;
        docxTable.leftBorderSpace = 123;
        docxTable.leftBorderColor = 'aeiou';
        docxTable.rightBorderType = 'aeiou';
        docxTable.rightBorderSize = 123;
        docxTable.rightBorderSpace = 123;
        docxTable.rightBorderColor = 'aeiou';
        docxTable.cellHorizontalBorderType = 'aeiou';
        docxTable.cellHorizontalBorderSize = 123;
        docxTable.cellHorizontalBorderSpace = 123;
        docxTable.cellHorizontalBorderColor = 'aeiou';
        docxTable.cellVerticalBorderType = 'aeiou';
        docxTable.cellVerticalBorderSize = 123;
        docxTable.cellVerticalBorderSpace = 123;
        docxTable.cellVerticalBorderColor = 'aeiou';
        docxTable.startBorderType = 'aeiou';
        docxTable.startBorderSize = 123;
        docxTable.startBorderSpace = 123;
        docxTable.startBorderColor = 'aeiou';
        docxTable.endBorderType = 'aeiou';
        docxTable.endBorderSize = 123;
        docxTable.endBorderSpace = 123;
        docxTable.endBorderColor = 'aeiou';
        docxTable.tableIndentationMode = 'aeiou';
        docxTable.tableIndentationWidth = 123;
        return docxTable;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagDocxTable) {
            SwagDocxTable docxTable = (SwagDocxTable) obj;
            return this.tableID == docxTable.tableID
                && this.path == docxTable.path
                && this.width == docxTable.width
                && this.widthType == docxTable.widthType
                && this.tableRows == docxTable.tableRows
                && this.topBorderType == docxTable.topBorderType
                && this.topBorderSize == docxTable.topBorderSize
                && this.topBorderSpace == docxTable.topBorderSpace
                && this.topBorderColor == docxTable.topBorderColor
                && this.bottomBorderType == docxTable.bottomBorderType
                && this.bottomBorderSize == docxTable.bottomBorderSize
                && this.bottomBorderSpace == docxTable.bottomBorderSpace
                && this.bottomBorderColor == docxTable.bottomBorderColor
                && this.leftBorderType == docxTable.leftBorderType
                && this.leftBorderSize == docxTable.leftBorderSize
                && this.leftBorderSpace == docxTable.leftBorderSpace
                && this.leftBorderColor == docxTable.leftBorderColor
                && this.rightBorderType == docxTable.rightBorderType
                && this.rightBorderSize == docxTable.rightBorderSize
                && this.rightBorderSpace == docxTable.rightBorderSpace
                && this.rightBorderColor == docxTable.rightBorderColor
                && this.cellHorizontalBorderType == docxTable.cellHorizontalBorderType
                && this.cellHorizontalBorderSize == docxTable.cellHorizontalBorderSize
                && this.cellHorizontalBorderSpace == docxTable.cellHorizontalBorderSpace
                && this.cellHorizontalBorderColor == docxTable.cellHorizontalBorderColor
                && this.cellVerticalBorderType == docxTable.cellVerticalBorderType
                && this.cellVerticalBorderSize == docxTable.cellVerticalBorderSize
                && this.cellVerticalBorderSpace == docxTable.cellVerticalBorderSpace
                && this.cellVerticalBorderColor == docxTable.cellVerticalBorderColor
                && this.startBorderType == docxTable.startBorderType
                && this.startBorderSize == docxTable.startBorderSize
                && this.startBorderSpace == docxTable.startBorderSpace
                && this.startBorderColor == docxTable.startBorderColor
                && this.endBorderType == docxTable.endBorderType
                && this.endBorderSize == docxTable.endBorderSize
                && this.endBorderSpace == docxTable.endBorderSpace
                && this.endBorderColor == docxTable.endBorderColor
                && this.tableIndentationMode == docxTable.tableIndentationMode
                && this.tableIndentationWidth == docxTable.tableIndentationWidth;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (tableID == null ? 0 : System.hashCode(tableID));
        hashCode = (17 * hashCode) + (path == null ? 0 : System.hashCode(path));
        hashCode = (17 * hashCode) + (width == null ? 0 : System.hashCode(width));
        hashCode = (17 * hashCode) + (widthType == null ? 0 : System.hashCode(widthType));
        hashCode = (17 * hashCode) + (tableRows == null ? 0 : System.hashCode(tableRows));
        hashCode = (17 * hashCode) + (topBorderType == null ? 0 : System.hashCode(topBorderType));
        hashCode = (17 * hashCode) + (topBorderSize == null ? 0 : System.hashCode(topBorderSize));
        hashCode = (17 * hashCode) + (topBorderSpace == null ? 0 : System.hashCode(topBorderSpace));
        hashCode = (17 * hashCode) + (topBorderColor == null ? 0 : System.hashCode(topBorderColor));
        hashCode = (17 * hashCode) + (bottomBorderType == null ? 0 : System.hashCode(bottomBorderType));
        hashCode = (17 * hashCode) + (bottomBorderSize == null ? 0 : System.hashCode(bottomBorderSize));
        hashCode = (17 * hashCode) + (bottomBorderSpace == null ? 0 : System.hashCode(bottomBorderSpace));
        hashCode = (17 * hashCode) + (bottomBorderColor == null ? 0 : System.hashCode(bottomBorderColor));
        hashCode = (17 * hashCode) + (leftBorderType == null ? 0 : System.hashCode(leftBorderType));
        hashCode = (17 * hashCode) + (leftBorderSize == null ? 0 : System.hashCode(leftBorderSize));
        hashCode = (17 * hashCode) + (leftBorderSpace == null ? 0 : System.hashCode(leftBorderSpace));
        hashCode = (17 * hashCode) + (leftBorderColor == null ? 0 : System.hashCode(leftBorderColor));
        hashCode = (17 * hashCode) + (rightBorderType == null ? 0 : System.hashCode(rightBorderType));
        hashCode = (17 * hashCode) + (rightBorderSize == null ? 0 : System.hashCode(rightBorderSize));
        hashCode = (17 * hashCode) + (rightBorderSpace == null ? 0 : System.hashCode(rightBorderSpace));
        hashCode = (17 * hashCode) + (rightBorderColor == null ? 0 : System.hashCode(rightBorderColor));
        hashCode = (17 * hashCode) + (cellHorizontalBorderType == null ? 0 : System.hashCode(cellHorizontalBorderType));
        hashCode = (17 * hashCode) + (cellHorizontalBorderSize == null ? 0 : System.hashCode(cellHorizontalBorderSize));
        hashCode = (17 * hashCode) + (cellHorizontalBorderSpace == null ? 0 : System.hashCode(cellHorizontalBorderSpace));
        hashCode = (17 * hashCode) + (cellHorizontalBorderColor == null ? 0 : System.hashCode(cellHorizontalBorderColor));
        hashCode = (17 * hashCode) + (cellVerticalBorderType == null ? 0 : System.hashCode(cellVerticalBorderType));
        hashCode = (17 * hashCode) + (cellVerticalBorderSize == null ? 0 : System.hashCode(cellVerticalBorderSize));
        hashCode = (17 * hashCode) + (cellVerticalBorderSpace == null ? 0 : System.hashCode(cellVerticalBorderSpace));
        hashCode = (17 * hashCode) + (cellVerticalBorderColor == null ? 0 : System.hashCode(cellVerticalBorderColor));
        hashCode = (17 * hashCode) + (startBorderType == null ? 0 : System.hashCode(startBorderType));
        hashCode = (17 * hashCode) + (startBorderSize == null ? 0 : System.hashCode(startBorderSize));
        hashCode = (17 * hashCode) + (startBorderSpace == null ? 0 : System.hashCode(startBorderSpace));
        hashCode = (17 * hashCode) + (startBorderColor == null ? 0 : System.hashCode(startBorderColor));
        hashCode = (17 * hashCode) + (endBorderType == null ? 0 : System.hashCode(endBorderType));
        hashCode = (17 * hashCode) + (endBorderSize == null ? 0 : System.hashCode(endBorderSize));
        hashCode = (17 * hashCode) + (endBorderSpace == null ? 0 : System.hashCode(endBorderSpace));
        hashCode = (17 * hashCode) + (endBorderColor == null ? 0 : System.hashCode(endBorderColor));
        hashCode = (17 * hashCode) + (tableIndentationMode == null ? 0 : System.hashCode(tableIndentationMode));
        hashCode = (17 * hashCode) + (tableIndentationWidth == null ? 0 : System.hashCode(tableIndentationWidth));
        return hashCode;
    }
}

