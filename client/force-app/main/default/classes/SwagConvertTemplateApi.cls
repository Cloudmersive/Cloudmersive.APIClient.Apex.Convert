/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagConvertTemplateApi {
    SwagClient client;

    public SwagConvertTemplateApi(SwagClient client) {
        this.client = client;
    }

    public SwagConvertTemplateApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Apply Word DOCX template
     * Apply operations to fill in a Word DOCX template by replacing target template/placeholder strings in the DOCX with values, generating a final Word DOCX result.  For example, you could create a Word Document invoice containing strings such as &quot;{FirstName}&quot; and &quot;{LastName}&quot; and then replace these values with &quot;John&quot; and &quot;Smith&quot;.
     * @param inputFile Input file to perform the operation on. (required)
     * @param templateDefinition Template definition for the document, including what values to replace (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertTemplateApplyDocxTemplate(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/template/docx/apply', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'templateDefinition' => (Object) params.get('templateDefinition')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Apply HTML template
     * Apply operations to fill in an HTML template, generating a final HTML result
     * @param value Operations to apply to template (required)
     * @return SwagHtmlTemplateApplicationResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagHtmlTemplateApplicationResponse convertTemplateApplyHtmlTemplate(Map<String, Object> params) {
        client.assertNotNull(params.get('value'), 'value');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagHtmlTemplateApplicationResponse) client.invoke(
            'POST', '/convert/template/html/apply',
            (SwagHtmlTemplateApplicationRequest) params.get('value'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagHtmlTemplateApplicationResponse.class
        );
    }
}
