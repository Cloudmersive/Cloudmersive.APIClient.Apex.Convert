/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Request to convert a URL to a PDF file
 */
public class SwagUrlToPdfRequest implements Swagger.MappedProperties {
    /**
     * URL address of the website to screenshot.  HTTP and HTTPS are both supported, as are custom ports.
     * @return url
     */
    public String url { get; set; }

    /**
     * Optional: Additional number of milliseconds to wait once the web page has finished loading before taking the screenshot.  Can be helpful for highly asynchronous websites.  Provide a value of 0 for the default of 5000 milliseconds (5 seconds)
     * @return extraLoadingWait
     */
    public Integer extraLoadingWait { get; set; }

    /**
     * Optional: Set to true to include background graphics in the PDF, or false to not include.  Default is true.
     * @return includeBackgroundGraphics
     */
    public Boolean includeBackgroundGraphics { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Url' => 'url',
        'ExtraLoadingWait' => 'extraLoadingWait',
        'IncludeBackgroundGraphics' => 'includeBackgroundGraphics'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagUrlToPdfRequest getExample() {
        SwagUrlToPdfRequest urlToPdfRequest = new SwagUrlToPdfRequest();
        urlToPdfRequest.url = 'aeiou';
        urlToPdfRequest.extraLoadingWait = 123;
        urlToPdfRequest.includeBackgroundGraphics = true;
        return urlToPdfRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagUrlToPdfRequest) {
            SwagUrlToPdfRequest urlToPdfRequest = (SwagUrlToPdfRequest) obj;
            return this.url == urlToPdfRequest.url
                && this.extraLoadingWait == urlToPdfRequest.extraLoadingWait
                && this.includeBackgroundGraphics == urlToPdfRequest.includeBackgroundGraphics;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (url == null ? 0 : System.hashCode(url));
        hashCode = (17 * hashCode) + (extraLoadingWait == null ? 0 : System.hashCode(extraLoadingWait));
        hashCode = (17 * hashCode) + (includeBackgroundGraphics == null ? 0 : System.hashCode(includeBackgroundGraphics));
        return hashCode;
    }
}

