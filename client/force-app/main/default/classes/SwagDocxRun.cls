/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * A content run in a Word Document (DOCX) file
 */
public class SwagDocxRun implements Swagger.MappedProperties {
    /**
     * Index of the run, 0-based
     * @return runIndex
     */
    public Integer runIndex { get; set; }

    /**
     * The Path of the location of this object; leave blank for new tables
     * @return path
     */
    public String path { get; set; }

    /**
     * Text items inside the run; this is where the actual text content is stored
     * @return textItems
     */
    public List<SwagDocxText> textItems { get; set; }

    /**
     * True to make the text bold, false otherwise
     * @return bold
     */
    public Boolean bold { get; set; }

    /**
     * True to make the text italic, false otherwise
     * @return italic
     */
    public Boolean italic { get; set; }

    /**
     * Underline mode for the text; possible values are: Words, Double, Thick, Dotted, DottedHeavy, Dash, DashedHeavy, DashLong, DashLongHeavy, DotDash, DashDotHeavy, DotDotDash, DashDotDotHeavy, Wave, WavyHeavy, WavyDouble, None
     * @return underline
     */
    public String underline { get; set; }

    /**
     * Font Family name for the text, e.g. "Arial" or "Times New Roman"
     * @return fontFamily
     */
    public String fontFamily { get; set; }

    /**
     * Font size in font points (e.g. "24")
     * @return fontSize
     */
    public String fontSize { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'RunIndex' => 'runIndex',
        'Path' => 'path',
        'TextItems' => 'textItems',
        'Bold' => 'bold',
        'Italic' => 'italic',
        'Underline' => 'underline',
        'FontFamily' => 'fontFamily',
        'FontSize' => 'fontSize'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public SwagDocxRun() {
        textItems = new List<SwagDocxText>();
    }

    public static SwagDocxRun getExample() {
        SwagDocxRun docxRun = new SwagDocxRun();
        docxRun.runIndex = 123;
        docxRun.path = 'aeiou';
        docxRun.textItems = new List<SwagDocxText>{SwagDocxText.getExample()};
        docxRun.bold = true;
        docxRun.italic = true;
        docxRun.underline = 'aeiou';
        docxRun.fontFamily = 'aeiou';
        docxRun.fontSize = 'aeiou';
        return docxRun;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagDocxRun) {
            SwagDocxRun docxRun = (SwagDocxRun) obj;
            return this.runIndex == docxRun.runIndex
                && this.path == docxRun.path
                && this.textItems == docxRun.textItems
                && this.bold == docxRun.bold
                && this.italic == docxRun.italic
                && this.underline == docxRun.underline
                && this.fontFamily == docxRun.fontFamily
                && this.fontSize == docxRun.fontSize;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (runIndex == null ? 0 : System.hashCode(runIndex));
        hashCode = (17 * hashCode) + (path == null ? 0 : System.hashCode(path));
        hashCode = (17 * hashCode) + (textItems == null ? 0 : System.hashCode(textItems));
        hashCode = (17 * hashCode) + (bold == null ? 0 : System.hashCode(bold));
        hashCode = (17 * hashCode) + (italic == null ? 0 : System.hashCode(italic));
        hashCode = (17 * hashCode) + (underline == null ? 0 : System.hashCode(underline));
        hashCode = (17 * hashCode) + (fontFamily == null ? 0 : System.hashCode(fontFamily));
        hashCode = (17 * hashCode) + (fontSize == null ? 0 : System.hashCode(fontSize));
        return hashCode;
    }
}

