/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Result of running a get-info operation on an image
 */
public class SwagGetImageInfoResult implements Swagger.MappedProperties {
    /**
     * Get successful
     * @return successful
     */
    public Boolean successful { get; set; }

    /**
     * Color space of the image
     * @return colorSpace
     */
    public String colorSpace { get; set; }

    /**
     * Color type of the image
     * @return colorType
     */
    public String colorType { get; set; }

    /**
     * Width in pixels of the image
     * @return width
     */
    public Integer width { get; set; }

    /**
     * Height in pixels of the image
     * @return height
     */
    public Integer height { get; set; }

    /**
     * Compression level value from 0 (lowest quality) to 100 (highest quality)
     * @return compressionLevel
     */
    public Integer compressionLevel { get; set; }

    /**
     * SHA256 hash signature of the image
     * @return imageHashSignature
     */
    public String imageHashSignature { get; set; }

    /**
     * True if the image contains transparency, otherwise false
     * @return hasTransparency
     */
    public Boolean hasTransparency { get; set; }

    /**
     * MIME type of the image format
     * @return mimeType
     */
    public String mimeType { get; set; }

    /**
     * Image format
     * @return imageFormat
     */
    public String imageFormat { get; set; }

    /**
     * Units of the DPI measurement; can be either in Inches or Centimeters
     * @return dpIUnit
     */
    public String dpIUnit { get; set; }

    /**
     * DPI (pixels per unit, e.g. pixels per inch) of the image
     * @return DPI
     */
    public Double DPI { get; set; }

    /**
     * Unique colors in the image
     * @return colorCount
     */
    public Integer colorCount { get; set; }

    /**
     * Bit depth of the image
     * @return bitDepth
     */
    public Integer bitDepth { get; set; }

    /**
     * Comment string in the image
     * @return comment
     */
    public String comment { get; set; }

    /**
     * Name of the EXIF profile used
     * @return exifProfileName
     */
    public String exifProfileName { get; set; }

    /**
     * EXIF tags and values embedded in the image
     * @return exifValues
     */
    public List<SwagExifValue> exifValues { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Successful' => 'successful',
        'ColorSpace' => 'colorSpace',
        'ColorType' => 'colorType',
        'Width' => 'width',
        'Height' => 'height',
        'CompressionLevel' => 'compressionLevel',
        'ImageHashSignature' => 'imageHashSignature',
        'HasTransparency' => 'hasTransparency',
        'MimeType' => 'mimeType',
        'ImageFormat' => 'imageFormat',
        'DPIUnit' => 'dpIUnit',
        'ColorCount' => 'colorCount',
        'BitDepth' => 'bitDepth',
        'Comment' => 'comment',
        'ExifProfileName' => 'exifProfileName',
        'ExifValues' => 'exifValues'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public SwagGetImageInfoResult() {
        exifValues = new List<SwagExifValue>();
    }

    public static SwagGetImageInfoResult getExample() {
        SwagGetImageInfoResult getImageInfoResult = new SwagGetImageInfoResult();
        getImageInfoResult.successful = true;
        getImageInfoResult.colorSpace = 'aeiou';
        getImageInfoResult.colorType = 'aeiou';
        getImageInfoResult.width = 123;
        getImageInfoResult.height = 123;
        getImageInfoResult.compressionLevel = 123;
        getImageInfoResult.imageHashSignature = 'aeiou';
        getImageInfoResult.hasTransparency = true;
        getImageInfoResult.mimeType = 'aeiou';
        getImageInfoResult.imageFormat = 'aeiou';
        getImageInfoResult.dpIUnit = 'aeiou';
        getImageInfoResult.DPI = 1.3579;
        getImageInfoResult.colorCount = 123;
        getImageInfoResult.bitDepth = 123;
        getImageInfoResult.comment = 'aeiou';
        getImageInfoResult.exifProfileName = 'aeiou';
        getImageInfoResult.exifValues = new List<SwagExifValue>{SwagExifValue.getExample()};
        return getImageInfoResult;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagGetImageInfoResult) {
            SwagGetImageInfoResult getImageInfoResult = (SwagGetImageInfoResult) obj;
            return this.successful == getImageInfoResult.successful
                && this.colorSpace == getImageInfoResult.colorSpace
                && this.colorType == getImageInfoResult.colorType
                && this.width == getImageInfoResult.width
                && this.height == getImageInfoResult.height
                && this.compressionLevel == getImageInfoResult.compressionLevel
                && this.imageHashSignature == getImageInfoResult.imageHashSignature
                && this.hasTransparency == getImageInfoResult.hasTransparency
                && this.mimeType == getImageInfoResult.mimeType
                && this.imageFormat == getImageInfoResult.imageFormat
                && this.dpIUnit == getImageInfoResult.dpIUnit
                && this.DPI == getImageInfoResult.DPI
                && this.colorCount == getImageInfoResult.colorCount
                && this.bitDepth == getImageInfoResult.bitDepth
                && this.comment == getImageInfoResult.comment
                && this.exifProfileName == getImageInfoResult.exifProfileName
                && this.exifValues == getImageInfoResult.exifValues;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (successful == null ? 0 : System.hashCode(successful));
        hashCode = (17 * hashCode) + (colorSpace == null ? 0 : System.hashCode(colorSpace));
        hashCode = (17 * hashCode) + (colorType == null ? 0 : System.hashCode(colorType));
        hashCode = (17 * hashCode) + (width == null ? 0 : System.hashCode(width));
        hashCode = (17 * hashCode) + (height == null ? 0 : System.hashCode(height));
        hashCode = (17 * hashCode) + (compressionLevel == null ? 0 : System.hashCode(compressionLevel));
        hashCode = (17 * hashCode) + (imageHashSignature == null ? 0 : System.hashCode(imageHashSignature));
        hashCode = (17 * hashCode) + (hasTransparency == null ? 0 : System.hashCode(hasTransparency));
        hashCode = (17 * hashCode) + (mimeType == null ? 0 : System.hashCode(mimeType));
        hashCode = (17 * hashCode) + (imageFormat == null ? 0 : System.hashCode(imageFormat));
        hashCode = (17 * hashCode) + (dpIUnit == null ? 0 : System.hashCode(dpIUnit));
        hashCode = (17 * hashCode) + (DPI == null ? 0 : System.hashCode(DPI));
        hashCode = (17 * hashCode) + (colorCount == null ? 0 : System.hashCode(colorCount));
        hashCode = (17 * hashCode) + (bitDepth == null ? 0 : System.hashCode(bitDepth));
        hashCode = (17 * hashCode) + (comment == null ? 0 : System.hashCode(comment));
        hashCode = (17 * hashCode) + (exifProfileName == null ? 0 : System.hashCode(exifProfileName));
        hashCode = (17 * hashCode) + (exifValues == null ? 0 : System.hashCode(exifValues));
        return hashCode;
    }
}

