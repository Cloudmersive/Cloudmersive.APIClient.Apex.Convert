/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagTransformDocumentApi {
    SwagClient client;

    public SwagTransformDocumentApi(SwagClient client) {
        this.client = client;
    }

    public SwagTransformDocumentApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Replace string in Word DOCX document, return result
     * Replace all instances of a string in an Office Word Document (docx)
     * @param matchString String to search for and match against, to be replaced (required)
     * @param replaceString String to replace the matched values with (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)
     * @param matchCase Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob transformDocumentDocxReplace(Map<String, Object> params) {
        client.assertNotNull(params.get('matchString'), 'matchString');
        client.assertNotNull(params.get('replaceString'), 'replaceString');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/transform/docx/replace-all', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl'),
                'matchString' => (String) params.get('matchString'),
                'replaceString' => (String) params.get('replaceString'),
                'matchCase' => (Boolean) params.get('matchCase')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Replace string in Word DOCX document, return edit session
     * Replace all instances of a string in an Office Word Document (docx).  Returns an edit session URL so that you can chain together multiple edit operations without having to send the entire document contents back and forth multiple times.  Call the Finish Editing API to retrieve the final document once editing is complete.
     * @param matchString String to search for and match against, to be replaced (required)
     * @param replaceString String to replace the matched values with (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)
     * @param matchCase Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)
     * @return SwagDocumentTransformEditSession
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocumentTransformEditSession transformDocumentDocxReplaceEditSession(Map<String, Object> params) {
        client.assertNotNull(params.get('matchString'), 'matchString');
        client.assertNotNull(params.get('replaceString'), 'replaceString');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagDocumentTransformEditSession) client.invoke(
            'POST', '/convert/transform/docx/replace-all/edit-session', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl'),
                'matchString' => (String) params.get('matchString'),
                'replaceString' => (String) params.get('replaceString'),
                'matchCase' => (Boolean) params.get('matchCase')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagDocumentTransformEditSession.class
        );
    }
    /**
     * Fill in data in a table in a Word DOCX document, return result
     * Replace placeholder rows ina  table in an Office Word Document (docx) using one or more templates
     * @param request  (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob transformDocumentDocxTableFillIn(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/transform/docx/table/fill/data',
            (SwagDocxTableTableFillRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Fill in data in a table in a Word DOCX document, return edit session
     * Replace placeholder rows ina  table in an Office Word Document (docx) using one or more templates.  Returns an edit session URL so that you can chain together multiple edit operations without having to send the entire document contents back and forth multiple times.  Call the Finish Editing API to retrieve the final document once editing is complete.
     * @param request  (required)
     * @return SwagDocumentTransformEditSession
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocumentTransformEditSession transformDocumentDocxTableFillInEditSession(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagDocumentTransformEditSession) client.invoke(
            'POST', '/convert/transform/docx/table/fill/data/edit-session',
            (SwagDocxTableTableFillRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagDocumentTransformEditSession.class
        );
    }
    /**
     * Fill in data in multiple tables in a Word DOCX document, return result
     * Replace placeholder rows in multiple tables in an Office Word Document (docx) using one or more templates
     * @param request  (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob transformDocumentDocxTableFillInMulti(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/transform/docx/table/fill/data/multi',
            (SwagDocxTableTableFillMultiRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Replace string in PowerPoint PPTX presentation, return result
     * Replace all instances of a string in an Office PowerPoint Document (pptx)
     * @param matchString String to search for and match against, to be replaced (required)
     * @param replaceString String to replace the matched values with (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)
     * @param matchCase Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob transformDocumentPptxReplace(Map<String, Object> params) {
        client.assertNotNull(params.get('matchString'), 'matchString');
        client.assertNotNull(params.get('replaceString'), 'replaceString');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/transform/pptx/replace-all', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl'),
                'matchString' => (String) params.get('matchString'),
                'replaceString' => (String) params.get('replaceString'),
                'matchCase' => (Boolean) params.get('matchCase')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
}
