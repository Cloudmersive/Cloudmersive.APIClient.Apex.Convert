/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagEditTextApi {
    SwagClient client;

    public SwagEditTextApi(SwagClient client) {
        this.client = client;
    }

    public SwagEditTextApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Base 64 decode, convert base 64 string to binary content
     * Decodes / converts base 64 UTF-8 text string to binary content
     * @param request Input request (required)
     * @return SwagBase64DecodeResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagBase64DecodeResponse editTextBase64Decode(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagBase64DecodeResponse) client.invoke(
            'POST', '/convert/edit/text/encoding/base64/decode',
            (SwagBase64DecodeRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagBase64DecodeResponse.class
        );
    }
    /**
     * Detect, check if text string is base 64 encoded
     * Checks, detects if input string is base 64 encoded
     * @param request Input request (required)
     * @return SwagBase64DetectResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagBase64DetectResponse editTextBase64Detect(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagBase64DetectResponse) client.invoke(
            'POST', '/convert/edit/text/encoding/base64/detect',
            (SwagBase64DetectRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagBase64DetectResponse.class
        );
    }
    /**
     * Base 64 encode, convert binary or file data to a text string
     * Encodes / converts binary or file data to a text string
     * @param request Input request (required)
     * @return SwagBase64EncodeResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagBase64EncodeResponse editTextBase64Encode(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagBase64EncodeResponse) client.invoke(
            'POST', '/convert/edit/text/encoding/base64/encode',
            (SwagBase64EncodeRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagBase64EncodeResponse.class
        );
    }
    /**
     * Set, change line endings of a text file
     * Sets the line ending type of a text file; set to Windows, Unix or Mac.
     * @param lineEndingType Required; \&#39;Windows\&#39; will use carriage return and line feed, \&#39;Unix\&#39; will use newline, and \&#39;Mac\&#39; will use carriage return (required)
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagChangeLineEndingResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagChangeLineEndingResponse editTextChangeLineEndings(Map<String, Object> params) {
        client.assertNotNull(params.get('lineEndingType'), 'lineEndingType');
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagChangeLineEndingResponse) client.invoke(
            'POST', '/convert/edit/text/line-endings/change', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'lineEndingType' => (String) params.get('lineEndingType')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagChangeLineEndingResponse.class
        );
    }
    /**
     * Detect line endings of a text file
     * Detect line ending type (Windows, Unix or Mac) of an input file.
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagDetectLineEndingsResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDetectLineEndingsResponse editTextDetectLineEndings(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagDetectLineEndingsResponse) client.invoke(
            'POST', '/convert/edit/text/line-endings/detect', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagDetectLineEndingsResponse.class
        );
    }
    /**
     * Find a regular expression regex in text input
     * Find all occurrences of the input regular expression in the input content, and returns the matches
     * @param request Input request (required)
     * @return SwagFindStringRegexResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagFindStringRegexResponse editTextFindRegex(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagFindStringRegexResponse) client.invoke(
            'POST', '/convert/edit/text/find/regex',
            (SwagFindStringRegexRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagFindStringRegexResponse.class
        );
    }
    /**
     * Find a string in text input
     * Finds all occurrences of the input string in the input content, and returns the matches
     * @param request Input request (required)
     * @return SwagFindStringSimpleResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagFindStringSimpleResponse editTextFindSimple(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagFindStringSimpleResponse) client.invoke(
            'POST', '/convert/edit/text/find/string',
            (SwagFindStringSimpleRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagFindStringSimpleResponse.class
        );
    }
    /**
     * Remove whitespace from text string
     * Removes all whitespace from text, leaving behind only non-whitespace characters.  Whitespace includes newlines, spaces and other whitespace characters.
     * @param request Input request (required)
     * @return SwagRemoveWhitespaceFromTextResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagRemoveWhitespaceFromTextResponse editTextRemoveAllWhitespace(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagRemoveWhitespaceFromTextResponse) client.invoke(
            'POST', '/convert/edit/text/remove/whitespace/all',
            (SwagRemoveWhitespaceFromTextRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagRemoveWhitespaceFromTextResponse.class
        );
    }
    /**
     * Remove HTML from text string
     * Removes HTML from text, leaving behind only text.  Formatted text will become plain text.  Important for protecting against HTML and Cross-Site-Scripting attacks.
     * @param request Input request (required)
     * @return SwagRemoveHtmlFromTextResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagRemoveHtmlFromTextResponse editTextRemoveHtml(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagRemoveHtmlFromTextResponse) client.invoke(
            'POST', '/convert/edit/text/remove/html',
            (SwagRemoveHtmlFromTextRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagRemoveHtmlFromTextResponse.class
        );
    }
    /**
     * Replace a string in text with a regex regular expression string
     * Replaces all occurrences of the input regular expression regex string in the input content, and returns the result
     * @param request Input request (required)
     * @return SwagReplaceStringRegexResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagReplaceStringRegexResponse editTextReplaceRegex(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagReplaceStringRegexResponse) client.invoke(
            'POST', '/convert/edit/text/replace/regex',
            (SwagReplaceStringRegexRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagReplaceStringRegexResponse.class
        );
    }
    /**
     * Replace a string in text with another string value
     * Replaces all occurrences of the input string in the input content, and returns the result
     * @param request Input request (required)
     * @return SwagReplaceStringSimpleResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagReplaceStringSimpleResponse editTextReplaceSimple(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagReplaceStringSimpleResponse) client.invoke(
            'POST', '/convert/edit/text/replace/string',
            (SwagReplaceStringSimpleRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagReplaceStringSimpleResponse.class
        );
    }
    /**
     * Detect text encoding of file
     * Checks text encoding of file
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagTextEncodingDetectResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagTextEncodingDetectResponse editTextTextEncodingDetect(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagTextEncodingDetectResponse) client.invoke(
            'POST', '/convert/edit/text/encoding/detect', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagTextEncodingDetectResponse.class
        );
    }
    /**
     * Trim leading and trailing whitespace from text string
     * Trim leading and trailing whitespace from text, leaving behind a trimmed string.  Whitespace includes newlines, spaces and other whitespace characters.
     * @param request Input request (required)
     * @return SwagRemoveWhitespaceFromTextResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagRemoveWhitespaceFromTextResponse editTextTrimWhitespace(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagRemoveWhitespaceFromTextResponse) client.invoke(
            'POST', '/convert/edit/text/remove/whitespace/trim',
            (SwagRemoveWhitespaceFromTextRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagRemoveWhitespaceFromTextResponse.class
        );
    }
}
