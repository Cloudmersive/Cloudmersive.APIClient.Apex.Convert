/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Input to a Insert Table Row request
 */
public class SwagInsertDocxTableRowRequest implements Swagger.MappedProperties {
    /**
     * Optional: Bytes of the input file to operate on
     * @return inputFileBytes
     */
    public Blob inputFileBytes { get; set; }

    /**
     * Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
     * @return inputFileUrl
     */
    public String inputFileUrl { get; set; }

    /**
     * Table you would like to insert
     * @return rowToInsert
     */
    public SwagDocxTableRow rowToInsert { get; set; }

    /**
     * Optional; default is TableEnd.  Placement Type of the insert; possible values are: TableStart (very beginning of the table), TableEnd (very end of the document), or a 0-based row index number as an integer, 0 being the first row in the table, 1 being the second row in the table, 2 being the third row in the table, etc. to insert this row after
     * @return insertPlacement
     */
    public String insertPlacement { get; set; }

    /**
     * Required; the path to the existing table to modify
     * @return existingTablePath
     */
    public String existingTablePath { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'InputFileBytes' => 'inputFileBytes',
        'InputFileUrl' => 'inputFileUrl',
        'RowToInsert' => 'rowToInsert',
        'InsertPlacement' => 'insertPlacement',
        'ExistingTablePath' => 'existingTablePath'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagInsertDocxTableRowRequest getExample() {
        SwagInsertDocxTableRowRequest insertDocxTableRowRequest = new SwagInsertDocxTableRowRequest();
        insertDocxTableRowRequest.inputFileBytes = EncodingUtil.base64Decode('VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu');
        insertDocxTableRowRequest.inputFileUrl = 'aeiou';
        insertDocxTableRowRequest.rowToInsert = SwagDocxTableRow.getExample();
        insertDocxTableRowRequest.insertPlacement = 'aeiou';
        insertDocxTableRowRequest.existingTablePath = 'aeiou';
        return insertDocxTableRowRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagInsertDocxTableRowRequest) {
            SwagInsertDocxTableRowRequest insertDocxTableRowRequest = (SwagInsertDocxTableRowRequest) obj;
            return this.inputFileBytes == insertDocxTableRowRequest.inputFileBytes
                && this.inputFileUrl == insertDocxTableRowRequest.inputFileUrl
                && this.rowToInsert == insertDocxTableRowRequest.rowToInsert
                && this.insertPlacement == insertDocxTableRowRequest.insertPlacement
                && this.existingTablePath == insertDocxTableRowRequest.existingTablePath;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (inputFileBytes == null ? 0 : System.hashCode(inputFileBytes));
        hashCode = (17 * hashCode) + (inputFileUrl == null ? 0 : System.hashCode(inputFileUrl));
        hashCode = (17 * hashCode) + (rowToInsert == null ? 0 : System.hashCode(rowToInsert));
        hashCode = (17 * hashCode) + (insertPlacement == null ? 0 : System.hashCode(insertPlacement));
        hashCode = (17 * hashCode) + (existingTablePath == null ? 0 : System.hashCode(existingTablePath));
        return hashCode;
    }
}

