/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Alternate file format possibility
 */
public class SwagAlternateFileFormatCandidate implements Swagger.MappedProperties {
    /**
     * Probability that this extension is the right one; possible values are between 0.0 (lowest confidence) and 1.0 (highest confidence)
     * @return probability
     */
    public Double probability { get; set; }

    /**
     * Detected file extension of the file format, with a leading period
     * @return detectedFileExtension
     */
    public String detectedFileExtension { get; set; }

    /**
     * MIME type of this file extension
     * @return detectedMimeType
     */
    public String detectedMimeType { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Probability' => 'probability',
        'DetectedFileExtension' => 'detectedFileExtension',
        'DetectedMimeType' => 'detectedMimeType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagAlternateFileFormatCandidate getExample() {
        SwagAlternateFileFormatCandidate alternateFileFormatCandidate = new SwagAlternateFileFormatCandidate();
        alternateFileFormatCandidate.probability = 1.3579;
        alternateFileFormatCandidate.detectedFileExtension = 'aeiou';
        alternateFileFormatCandidate.detectedMimeType = 'aeiou';
        return alternateFileFormatCandidate;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagAlternateFileFormatCandidate) {
            SwagAlternateFileFormatCandidate alternateFileFormatCandidate = (SwagAlternateFileFormatCandidate) obj;
            return this.probability == alternateFileFormatCandidate.probability
                && this.detectedFileExtension == alternateFileFormatCandidate.detectedFileExtension
                && this.detectedMimeType == alternateFileFormatCandidate.detectedMimeType;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (probability == null ? 0 : System.hashCode(probability));
        hashCode = (17 * hashCode) + (detectedFileExtension == null ? 0 : System.hashCode(detectedFileExtension));
        hashCode = (17 * hashCode) + (detectedMimeType == null ? 0 : System.hashCode(detectedMimeType));
        return hashCode;
    }
}

