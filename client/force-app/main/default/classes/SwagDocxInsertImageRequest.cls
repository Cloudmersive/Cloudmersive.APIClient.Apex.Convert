/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Input to set-footer command
 */
public class SwagDocxInsertImageRequest implements Swagger.MappedProperties {
    /**
     * Optional: Bytes of the input file to operate on
     * @return inputDocumentFileBytes
     */
    public Blob inputDocumentFileBytes { get; set; }

    /**
     * Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
     * @return inputDocumentFileUrl
     */
    public String inputDocumentFileUrl { get; set; }

    /**
     * Optional: Bytes of the input image file to operate on; if you supply this value do not supply InputImageFileUrl or ImageToAdd.
     * @return inputImageFileBytes
     */
    public Blob inputImageFileBytes { get; set; }

    /**
     * Optional: URL of an image file to operate on as input; if you supply this value do not supply InputImageFileBytes or ImageToAdd.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
     * @return inputImageFileUrl
     */
    public String inputImageFileUrl { get; set; }

    /**
     * Optional: Image to add; if you supply in this object, do not supply InputImageFileBytes or InputImageFileUrl.
     * @return imageToAdd
     */
    public SwagDocxImage imageToAdd { get; set; }

    /**
     * Optional; default is DocumentEnd.  Placement Type of the insert; possible values are: DocumentStart (very beginning of the document), DocumentEnd (very end of the document), BeforeExistingObject (right before an existing object - fill in the InsertPath field using the Path value from an existing object), AfterExistingObject (right after an existing object - fill in the InsertPath field using the Path value from an existing object)
     * @return insertPlacement
     */
    public String insertPlacement { get; set; }

    /**
     * Optional; location within the document to insert the object; fill in the InsertPath field using the Path value from an existing object.  Used with InsertPlacement of BeforeExistingObject or AfterExistingObject
     * @return insertPath
     */
    public String insertPath { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'InputDocumentFileBytes' => 'inputDocumentFileBytes',
        'InputDocumentFileUrl' => 'inputDocumentFileUrl',
        'InputImageFileBytes' => 'inputImageFileBytes',
        'InputImageFileUrl' => 'inputImageFileUrl',
        'ImageToAdd' => 'imageToAdd',
        'InsertPlacement' => 'insertPlacement',
        'InsertPath' => 'insertPath'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagDocxInsertImageRequest getExample() {
        SwagDocxInsertImageRequest docxInsertImageRequest = new SwagDocxInsertImageRequest();
        docxInsertImageRequest.inputDocumentFileBytes = EncodingUtil.base64Decode('VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu');
        docxInsertImageRequest.inputDocumentFileUrl = 'aeiou';
        docxInsertImageRequest.inputImageFileBytes = EncodingUtil.base64Decode('VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu');
        docxInsertImageRequest.inputImageFileUrl = 'aeiou';
        docxInsertImageRequest.imageToAdd = SwagDocxImage.getExample();
        docxInsertImageRequest.insertPlacement = 'aeiou';
        docxInsertImageRequest.insertPath = 'aeiou';
        return docxInsertImageRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagDocxInsertImageRequest) {
            SwagDocxInsertImageRequest docxInsertImageRequest = (SwagDocxInsertImageRequest) obj;
            return this.inputDocumentFileBytes == docxInsertImageRequest.inputDocumentFileBytes
                && this.inputDocumentFileUrl == docxInsertImageRequest.inputDocumentFileUrl
                && this.inputImageFileBytes == docxInsertImageRequest.inputImageFileBytes
                && this.inputImageFileUrl == docxInsertImageRequest.inputImageFileUrl
                && this.imageToAdd == docxInsertImageRequest.imageToAdd
                && this.insertPlacement == docxInsertImageRequest.insertPlacement
                && this.insertPath == docxInsertImageRequest.insertPath;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (inputDocumentFileBytes == null ? 0 : System.hashCode(inputDocumentFileBytes));
        hashCode = (17 * hashCode) + (inputDocumentFileUrl == null ? 0 : System.hashCode(inputDocumentFileUrl));
        hashCode = (17 * hashCode) + (inputImageFileBytes == null ? 0 : System.hashCode(inputImageFileBytes));
        hashCode = (17 * hashCode) + (inputImageFileUrl == null ? 0 : System.hashCode(inputImageFileUrl));
        hashCode = (17 * hashCode) + (imageToAdd == null ? 0 : System.hashCode(imageToAdd));
        hashCode = (17 * hashCode) + (insertPlacement == null ? 0 : System.hashCode(insertPlacement));
        hashCode = (17 * hashCode) + (insertPath == null ? 0 : System.hashCode(insertPath));
        return hashCode;
    }
}

