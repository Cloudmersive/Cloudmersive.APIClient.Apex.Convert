/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagEditHtmlApi {
    SwagClient client;

    public SwagEditHtmlApi(SwagClient client) {
        this.client = client;
    }

    public SwagEditHtmlApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Append an HTML tag to the HEAD section of an HTML Document
     * Appends an HTML tag to the HEAD section of an HTML document.
     * @param htmlTag The HTML tag to append. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editHtmlHtmlAppendHeaderTag(Map<String, Object> params) {
        client.assertNotNull(params.get('htmlTag'), 'htmlTag');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/html/head/append/tag', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl'),
                'htmlTag' => (String) params.get('htmlTag')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Append a Heading to an HTML Document
     * Appends a heading to the end of an HTML document.
     * @param headingText The text content to be used in the header. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param headingSize Optional: The heading size number. Default is 1. Accepts values between 1 and 6. (optional)
     * @param cssStyle Optional: The CSS style for the heading. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editHtmlHtmlAppendHeading(Map<String, Object> params) {
        client.assertNotNull(params.get('headingText'), 'headingText');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/html/append/heading', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl'),
                'headingText' => (String) params.get('headingText'),
                'headingSize' => (Integer) params.get('headingSize'),
                'cssStyle' => (String) params.get('cssStyle')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Append an Image to an HTML Document from a URL
     * Appends an image to the end of an HTML document using a URL.
     * @param imageUrl The URL for the image. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param cssStyle Optional: CSS style for the image. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editHtmlHtmlAppendImageFromUrl(Map<String, Object> params) {
        client.assertNotNull(params.get('imageUrl'), 'imageUrl');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/html/append/image/from-url', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl'),
                'imageUrl' => (String) params.get('imageUrl'),
                'cssStyle' => (String) params.get('cssStyle')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Append a Base64 Inline Image to an HTML Document
     * Appends a base64 inline image to the end of an HTML document from an input file or URL.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param imageFile Optional: Image file to be appended as base64 inline image. (optional)
     * @param imageUrl Optional: Image URL to be appended as base64 inline image. (optional)
     * @param cssStyle Optional: CSS style for the image. (optional)
     * @param imageExtension Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading an imageFile directly, instead of using imageUrl. If no extension can be determined, will default to JPG. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editHtmlHtmlAppendImageInline(Map<String, Object> params) {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/html/append/image/inline', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl'),
                'imageUrl' => (String) params.get('imageUrl'),
                'cssStyle' => (String) params.get('cssStyle'),
                'imageExtension' => (String) params.get('imageExtension')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Append a Paragraph to an HTML Document
     * Appends a paragraph to the end of an HTML document.
     * @param paragraphText The text content to be used in the paragraph. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param cssStyle Optional: The CSS style for the paragraph. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editHtmlHtmlAppendParagraph(Map<String, Object> params) {
        client.assertNotNull(params.get('paragraphText'), 'paragraphText');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/html/append/paragraph', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl'),
                'paragraphText' => (String) params.get('paragraphText'),
                'cssStyle' => (String) params.get('cssStyle')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Create a Blank HTML Document
     * Returns a blank HTML Document format file.  The file is blank, with no contents by default.  Use the optional input parameters to add various starting elements.  Use additional editing commands such as Append Header, Append Paragraph or Append Image from URL to populate the document.
     * @param title Optional: The title of the HTML document (optional)
     * @param cssUrl Optional: A CSS style URL to be added to the document. (optional)
     * @param cssInline Optional: An inline CSS style to be added to the document. (optional)
     * @param javascriptUrl Optional: Javascript URL to be added to the document. (optional)
     * @param javascriptInline Optional: Inline Javascript to be added to the document. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editHtmlHtmlCreateBlankDocument(Map<String, Object> params) {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/edit/html/create/blank', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'title' => (String) params.get('title'),
                'cssUrl' => (String) params.get('cssUrl'),
                'cssInline' => (String) params.get('cssInline'),
                'javascriptUrl' => (String) params.get('javascriptUrl'),
                'javascriptInline' => (String) params.get('javascriptInline')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Gets the language for the HTML document
     * Retrieves the language code (e.g. &quot;en&quot; or &quot;de&quot;) of an HTML document.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return SwagHtmlGetLanguageResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagHtmlGetLanguageResult editHtmlHtmlGetLanguage(Map<String, Object> params) {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagHtmlGetLanguageResult) client.invoke(
            'POST', '/convert/edit/html/head/get/language', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagHtmlGetLanguageResult.class
        );
    }
    /**
     * Extract resolved link URLs from HTML File
     * Extracts the resolved link URLs, fully-qualified if possible, from an input HTML file.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param baseUrl Optional: Base URL of the page, such as https://mydomain.com (optional)
     * @return SwagHtmlGetLinksResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagHtmlGetLinksResponse editHtmlHtmlGetLinks(Map<String, Object> params) {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagHtmlGetLinksResponse) client.invoke(
            'POST', '/convert/edit/html/extract/links', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl'),
                'baseUrl' => (String) params.get('baseUrl')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagHtmlGetLinksResponse.class
        );
    }
    /**
     * Gets the rel canonical URL for the HTML document
     * Gets the rel canonical URL of an HTML document.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return SwagHtmlGetRelCanonicalUrlResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagHtmlGetRelCanonicalUrlResult editHtmlHtmlGetRelCanonical(Map<String, Object> params) {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagHtmlGetRelCanonicalUrlResult) client.invoke(
            'POST', '/convert/edit/html/head/get/rel-canonical-url', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagHtmlGetRelCanonicalUrlResult.class
        );
    }
    /**
     * Gets the sitemap URL for the HTML document
     * Gets the sitemap link URL of an HTML document.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return SwagHtmlGetSitemapUrlResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagHtmlGetSitemapUrlResult editHtmlHtmlGetSitemap(Map<String, Object> params) {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagHtmlGetSitemapUrlResult) client.invoke(
            'POST', '/convert/edit/html/head/get/sitemap-url', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagHtmlGetSitemapUrlResult.class
        );
    }
    /**
     * Sets the language for the HTML document
     * Sets the language code of an HTML document.
     * @param languageCode The HTML langauge code to set. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editHtmlHtmlSetLanguage(Map<String, Object> params) {
        client.assertNotNull(params.get('languageCode'), 'languageCode');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/html/head/set/language', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl'),
                'languageCode' => (String) params.get('languageCode')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Sets the rel canonical URL for the HTML document
     * Sets the rel canonical URL of an HTML document.  This is useful for telling search engines and other indexers which pages are duplicates of eachother; any pages with the rel&#x3D;canonical tag will be treated as duplicates of the canonical URL.
     * @param canonicalUrl The HTML canonical URL to set. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editHtmlHtmlSetRelCanonical(Map<String, Object> params) {
        client.assertNotNull(params.get('canonicalUrl'), 'canonicalUrl');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/html/head/set/rel-canonical-url', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl'),
                'canonicalUrl' => (String) params.get('canonicalUrl')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Sets the sitemap URL for the HTML document
     * Sets the sitemap URL of an HTML document.
     * @param sitemapUrl The HTML sitemap URL to set. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editHtmlHtmlSetSitemapUrl(Map<String, Object> params) {
        client.assertNotNull(params.get('sitemapUrl'), 'sitemapUrl');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/html/head/set/sitemap-url', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl'),
                'sitemapUrl' => (String) params.get('sitemapUrl')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
}
