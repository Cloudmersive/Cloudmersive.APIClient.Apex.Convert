/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagEditHtmlApi {
    SwagClient client;

    public SwagEditHtmlApi(SwagClient client) {
        this.client = client;
    }

    public SwagEditHtmlApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Append a Heading to an HTML Document
     * Appends a heading to the end of an HTML document.
     * @param headingText The text content to be used in the header. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)
     * @param headingSize Optional: The heading size number. Default is 1. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editHtmlHtmlAppendHeading(Map<String, Object> params) {
        client.assertNotNull(params.get('headingText'), 'headingText');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/html/append/heading', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl'),
                'headingText' => (String) params.get('headingText'),
                'headingSize' => (Integer) params.get('headingSize')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Append an Image to an HTML Document from a URL
     * Appends an image to the end of an HTML document using a URL.
     * @param imageUrl The URL for the image. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)
     * @param cssStyle Optional: CSS style for the image. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editHtmlHtmlAppendImageFromUrl(Map<String, Object> params) {
        client.assertNotNull(params.get('imageUrl'), 'imageUrl');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/html/append/image/from-url', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl'),
                'imageUrl' => (String) params.get('imageUrl'),
                'cssStyle' => (String) params.get('cssStyle')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Append a Base64 Inline Image to an HTML Document
     * Appends a base64 inline image to the end of an HTML document from an input file or URL.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)
     * @param imageFile Optional: Image file to be appended as base64 inline image. (optional)
     * @param imageUrl Optional: Image URL to be appended as base64 inline image. (optional)
     * @param cssStyle Optional: CSS style for the image. (optional)
     * @param imageExtension Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading a file directly, such as with a byte array. If no extension can be determined, will default to JPG. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editHtmlHtmlAppendImageInline(Map<String, Object> params) {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/html/append/image/inline', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl'),
                'imageUrl' => (String) params.get('imageUrl'),
                'cssStyle' => (String) params.get('cssStyle'),
                'imageExtension' => (String) params.get('imageExtension')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Append a Paragraph to an HTML Document
     * Appends a paragraph to the end of an HTML document.
     * @param paragraphText The text content to be used in the paragraph. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editHtmlHtmlAppendParagraph(Map<String, Object> params) {
        client.assertNotNull(params.get('paragraphText'), 'paragraphText');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/edit/html/append/paragraph', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'inputFileUrl' => (String) params.get('inputFileUrl'),
                'paragraphText' => (String) params.get('paragraphText')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
}
