/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Name and value pair for a custom-defined DOCX metadata property
 */
public class SwagDocxMetadataCustomProperty implements Swagger.MappedProperties {
    /**
     * Name of the property
     * @return propertyName
     */
    public String propertyName { get; set; }

    /**
     * Data type of the property; possible values are "string", "integer", "double" or "date"
     * @return propertyDataType
     */
    public String propertyDataType { get; set; }

    /**
     * If the property is of a string data type, then provides the string value if available
     * @return stringValue
     */
    public String stringValue { get; set; }

    /**
     * If the property is of a integer data type, then provides the integer value if available
     * @return integerValue
     */
    public Long integerValue { get; set; }

    /**
     * If the property is of a double floating point data type, then provides the double value if available
     * @return doubleValue
     */
    public Double doubleValue { get; set; }

    /**
     * If the property is of a date time data type, then provides the date time value if available
     * @return dateValue
     */
    public Datetime dateValue { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'PropertyName' => 'propertyName',
        'PropertyDataType' => 'propertyDataType',
        'StringValue' => 'stringValue',
        'IntegerValue' => 'integerValue',
        'DoubleValue' => 'doubleValue',
        'DateValue' => 'dateValue'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagDocxMetadataCustomProperty getExample() {
        SwagDocxMetadataCustomProperty docxMetadataCustomProperty = new SwagDocxMetadataCustomProperty();
        docxMetadataCustomProperty.propertyName = 'aeiou';
        docxMetadataCustomProperty.propertyDataType = 'aeiou';
        docxMetadataCustomProperty.stringValue = 'aeiou';
        docxMetadataCustomProperty.integerValue = 123456789L;
        docxMetadataCustomProperty.doubleValue = 1.3579;
        docxMetadataCustomProperty.dateValue = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
        return docxMetadataCustomProperty;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagDocxMetadataCustomProperty) {
            SwagDocxMetadataCustomProperty docxMetadataCustomProperty = (SwagDocxMetadataCustomProperty) obj;
            return this.propertyName == docxMetadataCustomProperty.propertyName
                && this.propertyDataType == docxMetadataCustomProperty.propertyDataType
                && this.stringValue == docxMetadataCustomProperty.stringValue
                && this.integerValue == docxMetadataCustomProperty.integerValue
                && this.doubleValue == docxMetadataCustomProperty.doubleValue
                && this.dateValue == docxMetadataCustomProperty.dateValue;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (propertyName == null ? 0 : System.hashCode(propertyName));
        hashCode = (17 * hashCode) + (propertyDataType == null ? 0 : System.hashCode(propertyDataType));
        hashCode = (17 * hashCode) + (stringValue == null ? 0 : System.hashCode(stringValue));
        hashCode = (17 * hashCode) + (integerValue == null ? 0 : System.hashCode(integerValue));
        hashCode = (17 * hashCode) + (doubleValue == null ? 0 : System.hashCode(doubleValue));
        hashCode = (17 * hashCode) + (dateValue == null ? 0 : System.hashCode(dateValue));
        return hashCode;
    }
}

