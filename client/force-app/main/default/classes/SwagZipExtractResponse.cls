/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Result of performing a zip extract operation
 */
public class SwagZipExtractResponse implements Swagger.MappedProperties {
    /**
     * True if the operation was successful, false otherwise
     * @return successful
     */
    public Boolean successful { get; set; }

    /**
     * Top-level files in the root directory fo the zip file
     * @return filesInZip
     */
    public List<SwagZipFile> filesInZip { get; set; }

    /**
     * Top-level directories in the root directory of the zip; directories can contain sub-directories and files
     * @return directoriesInZip
     */
    public List<SwagZipDirectory> directoriesInZip { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Successful' => 'successful',
        'FilesInZip' => 'filesInZip',
        'DirectoriesInZip' => 'directoriesInZip'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public SwagZipExtractResponse() {
        filesInZip = new List<SwagZipFile>();
        directoriesInZip = new List<SwagZipDirectory>();
    }

    public static SwagZipExtractResponse getExample() {
        SwagZipExtractResponse zipExtractResponse = new SwagZipExtractResponse();
        zipExtractResponse.successful = true;
        zipExtractResponse.filesInZip = new List<SwagZipFile>{SwagZipFile.getExample()};
        zipExtractResponse.directoriesInZip = new List<SwagZipDirectory>{SwagZipDirectory.getExample()};
        return zipExtractResponse;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagZipExtractResponse) {
            SwagZipExtractResponse zipExtractResponse = (SwagZipExtractResponse) obj;
            return this.successful == zipExtractResponse.successful
                && this.filesInZip == zipExtractResponse.filesInZip
                && this.directoriesInZip == zipExtractResponse.directoriesInZip;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (successful == null ? 0 : System.hashCode(successful));
        hashCode = (17 * hashCode) + (filesInZip == null ? 0 : System.hashCode(filesInZip));
        hashCode = (17 * hashCode) + (directoriesInZip == null ? 0 : System.hashCode(directoriesInZip));
        return hashCode;
    }
}

