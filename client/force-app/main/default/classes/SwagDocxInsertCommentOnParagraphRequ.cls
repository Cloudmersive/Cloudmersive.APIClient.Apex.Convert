/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Input to a Insert Comment on Paragraph request
 */
public class SwagDocxInsertCommentOnParagraphRequ implements Swagger.MappedProperties {
    /**
     * Optional: Bytes of the input file to operate on
     * @return inputFileBytes
     */
    public Blob inputFileBytes { get; set; }

    /**
     * Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
     * @return inputFileUrl
     */
    public String inputFileUrl { get; set; }

    /**
     * Path to the paragraph to attach the comment to.  You can get the Path by retrieving all of the Paragraphs in document by calling Get Body and taking the Path property of the desired paragraph to add the comment to.
     * @return paragraphPath
     */
    public String paragraphPath { get; set; }

    /**
     * Comment to insert
     * @return commentToInsert
     */
    public SwagDocxComment commentToInsert { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'InputFileBytes' => 'inputFileBytes',
        'InputFileUrl' => 'inputFileUrl',
        'ParagraphPath' => 'paragraphPath',
        'CommentToInsert' => 'commentToInsert'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagDocxInsertCommentOnParagraphRequ getExample() {
        SwagDocxInsertCommentOnParagraphRequ docxInsertCommentOnParagraphRequest = new SwagDocxInsertCommentOnParagraphRequ();
        docxInsertCommentOnParagraphRequest.inputFileBytes = EncodingUtil.base64Decode('VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu');
        docxInsertCommentOnParagraphRequest.inputFileUrl = 'aeiou';
        docxInsertCommentOnParagraphRequest.paragraphPath = 'aeiou';
        docxInsertCommentOnParagraphRequest.commentToInsert = SwagDocxComment.getExample();
        return docxInsertCommentOnParagraphRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagDocxInsertCommentOnParagraphRequ) {
            SwagDocxInsertCommentOnParagraphRequ docxInsertCommentOnParagraphRequest = (SwagDocxInsertCommentOnParagraphRequ) obj;
            return this.inputFileBytes == docxInsertCommentOnParagraphRequest.inputFileBytes
                && this.inputFileUrl == docxInsertCommentOnParagraphRequest.inputFileUrl
                && this.paragraphPath == docxInsertCommentOnParagraphRequest.paragraphPath
                && this.commentToInsert == docxInsertCommentOnParagraphRequest.commentToInsert;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (inputFileBytes == null ? 0 : System.hashCode(inputFileBytes));
        hashCode = (17 * hashCode) + (inputFileUrl == null ? 0 : System.hashCode(inputFileUrl));
        hashCode = (17 * hashCode) + (paragraphPath == null ? 0 : System.hashCode(paragraphPath));
        hashCode = (17 * hashCode) + (commentToInsert == null ? 0 : System.hashCode(commentToInsert));
        return hashCode;
    }
}

