/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagConvertDocumentApi {
    SwagClient client;

    public SwagConvertDocumentApi(SwagClient client) {
        this.client = client;
    }

    public SwagConvertDocumentApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Get document type information
     * Auto-detects a document\&#39;s type information; does not require file extension.  Analyzes file contents to confirm file type.  Even if no file extension is present, the auto-detect system will reliably analyze the contents of the file and identify its file type.  Supports over 100 image file formats, Office document file formats, PDF, and more.
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagAutodetectGetInfoResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagAutodetectGetInfoResult convertDocumentAutodetectGetInfo(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagAutodetectGetInfoResult) client.invoke(
            'POST', '/convert/autodetect/get-info', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagAutodetectGetInfoResult.class
        );
    }
    /**
     * Convert Document to PDF
     * Automatically detect file type and convert it to PDF.  Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files.
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentAutodetectToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/autodetect/to/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Document to PNG array
     * Automatically detect file type and convert it to an array of PNG images.  Supports all of the major Office document file formats, over 100 image formats, and even multi-page TIFF files.
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagAutodetectToPngResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagAutodetectToPngResult convertDocumentAutodetectToPngArray(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagAutodetectToPngResult) client.invoke(
            'POST', '/convert/autodetect/to/png', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagAutodetectToPngResult.class
        );
    }
    /**
     * Convert File to Thumbnail Image
     * Automatically detect file type and convert it to a PNG thumbnail. Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files. Returns a generic PNG thumbnail for unsupported formats.
     * @param inputFile Input file to perform the operation on. (required)
     * @param maxWidth Optional; Maximum width of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128. (optional)
     * @param maxHeight Optional; Maximum height of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128. (optional)
     * @param extension Optional; Specify the file extension of the inputFile. This will improve the response time in most cases. Also allows unsupported files without extensions to still return a corresponding generic icon. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentAutodetectToThumbnail(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/autodetect/to/thumbnail', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'maxWidth' => (Integer) params.get('maxWidth'),
                'maxHeight' => (Integer) params.get('maxHeight'),
                'extension' => (String) params.get('extension')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert File to Thumbnail Image Object
     * Automatically detect file type and convert it to an array of PNG thumbnails, returned as an object. May specify the number of pages for multiple thumbnails; default is one thumbnail. Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files. Returns a generic PNG thumbnail for unsupported formats.
     * @param inputFile Input file to perform the operation on. (required)
     * @param pages Optional; Specify how many pages of the document will be converted to thumbnails. Default is 1 page. (optional)
     * @param maxWidth Optional; Maximum width of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128. (optional)
     * @param maxHeight Optional; Maximum height of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128. (optional)
     * @param extension Optional; Specify the file extension of the inputFile. This will improve the response time in most cases. Also allows unsupported files without extensions to still return a corresponding generic icon. (optional)
     * @return SwagAutodetectToThumbnailsResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagAutodetectToThumbnailsResult convertDocumentAutodetectToThumbnailsAdvanced(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagAutodetectToThumbnailsResult) client.invoke(
            'POST', '/convert/autodetect/to/thumbnail/advanced', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'pages' => (Integer) params.get('pages'),
                'maxWidth' => (Integer) params.get('maxWidth'),
                'maxHeight' => (Integer) params.get('maxHeight'),
                'extension' => (String) params.get('extension')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagAutodetectToThumbnailsResult.class
        );
    }
    /**
     * Convert Document to Text (txt)
     * Automatically detect file type and convert it to Text.  Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT) and PDF files.  For spreadsheets, all worksheets will be included.  If you wish to exclude certain pages, worksheets, slides, etc. use the Split document API first, or the delete pages/slides/worksheet APIs first to adjust the document to the target state prior to converting to text.
     * @param inputFile Input file to perform the operation on. (required)
     * @param textFormattingMode Optional; specify how whitespace should be handled when converting the document to text.  Possible values are \&#39;preserveWhitespace\&#39; which will attempt to preserve whitespace in the document and relative positioning of text within the document, and \&#39;minimizeWhitespace\&#39; which will not insert additional spaces into the document in most cases.  Default is \&#39;preserveWhitespace\&#39;. (optional)
     * @return SwagTextConversionResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagTextConversionResult convertDocumentAutodetectToTxt(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagTextConversionResult) client.invoke(
            'POST', '/convert/autodetect/to/txt', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'textFormattingMode' => (String) params.get('textFormattingMode')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagTextConversionResult.class
        );
    }
    /**
     * Convert CSV to Excel XLSX Spreadsheet
     * Convert CSV file to Office Excel XLSX Workbooks file format.
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentCsvToXlsx(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/csv/to/xlsx', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Word DOC (97-03) Document to DOCX
     * Convert/upgrade Office Word (97-2003 Format) Documents (doc) to the modern DOCX format
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentDocToDocx(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/doc/to/docx', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Word DOC (97-03) Document to PDF
     * Convert Office Word (97-2003 Format) Documents (doc) to standard PDF
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentDocToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/doc/to/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Word DOC (97-03) Document to Text (txt)
     * Convert Office Word DOC (97-03) Document (doc) to text
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagTextConversionResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagTextConversionResult convertDocumentDocToTxt(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagTextConversionResult) client.invoke(
            'POST', '/convert/doc/to/txt', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagTextConversionResult.class
        );
    }
    /**
     * Convert Word DOCX Document to PDF
     * Convert Office Word Documents (docx) to standard PDF
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentDocxToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/docx/to/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert DOCX document to PNG image array
     * Converts an Office Word Document (DOCX) file to an array of PNG images, one for each page.
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagDocxToPngResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagDocxToPngResult convertDocumentDocxToPng(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagDocxToPngResult) client.invoke(
            'POST', '/convert/docx/to/png', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagDocxToPngResult.class
        );
    }
    /**
     * Convert Word DOCX Document to Text (txt)
     * Convert Office Word Documents (docx) to text
     * @param inputFile Input file to perform the operation on. (required)
     * @param textFormattingMode Optional; specify how whitespace should be handled when converting the document to text.  Possible values are \&#39;preserveWhitespace\&#39; which will attempt to preserve whitespace in the document and relative positioning of text within the document, and \&#39;minimizeWhitespace\&#39; which will not insert additional spaces into the document in most cases.  Default is \&#39;minimizeWhitespace\&#39;. (optional)
     * @return SwagTextConversionResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagTextConversionResult convertDocumentDocxToTxt(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagTextConversionResult) client.invoke(
            'POST', '/convert/docx/to/txt', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'textFormattingMode' => (String) params.get('textFormattingMode')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagTextConversionResult.class
        );
    }
    /**
     * Convert Email EML file to HTML string
     * Convert Outlook Email EML file to HTML string and attachments. Supports images if they are base 64 inline.
     * @param inputFile Input file to perform the operation on. (required)
     * @param bodyOnly Optional; If true, the HTML string will only include the body of the email. Other information such as subject will still be given as properties in the response object. Default is false. (optional)
     * @param includeAttachments Optional; If false, the response object will not include any attachment files from the input file. Default is true. (optional)
     * @return SwagEmlToHtmlResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagEmlToHtmlResult convertDocumentEmlToHtml(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagEmlToHtmlResult) client.invoke(
            'POST', '/convert/eml/to/html', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'bodyOnly' => (Boolean) params.get('bodyOnly'),
                'includeAttachments' => (Boolean) params.get('includeAttachments')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagEmlToHtmlResult.class
        );
    }
    /**
     * Convert Email EML file to PDF document
     * Convert Outlook Email EML file to PDF document. Supports images if they are base 64 inline.
     * @param inputFile Input file to perform the operation on. (required)
     * @param bodyOnly Optional; If true, the HTML string will only include the body of the email. Other information such as subject will still be given as properties in the response object. Default is false. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentEmlToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/eml/to/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'bodyOnly' => (Boolean) params.get('bodyOnly')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Get PNG icon file for the file extension
     * Returns a PNG icon for the given file format extension as a file for download. User may specify the icon size. Supports over 100 file formats, with a generic icon for unsupported formats.
     * @param fileExtension Required; The file extension to be used for the icon. Limited to 4 AlphaNumeric characters. (required)
     * @param iconSize Optional; The desired width of the icon, preserving its aspect ratio. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentGetFileTypeIcon(Map<String, Object> params) {
        client.assertNotNull(params.get('fileExtension'), 'fileExtension');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/convert/autodetect/get-icon', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'fileExtension' => (String) params.get('fileExtension'),
                'iconSize' => (Integer) params.get('iconSize')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Get PNG icon byte array for the file extension
     * Returns a PNG icon for the given file format extension directly as a byte array. User may specify the icon size. Supports over 100 file formats, with a generic icon for unsupported formats.
     * @param fileExtension Required; The file extension to be used for the icon. Limited to 4 AlphaNumeric characters. (required)
     * @param iconSize Optional; The desired width of the icon, preserving its aspect ratio. (optional)
     * @return SwagGetFileTypeIconResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetFileTypeIconResult convertDocumentGetFileTypeIconAdvanced(Map<String, Object> params) {
        client.assertNotNull(params.get('fileExtension'), 'fileExtension');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetFileTypeIconResult) client.invoke(
            'POST', '/convert/autodetect/get-icon/advanced', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'fileExtension' => (String) params.get('fileExtension'),
                'iconSize' => (Integer) params.get('iconSize')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagGetFileTypeIconResult.class
        );
    }
    /**
     * Convert HTML document file to PDF Document
     * Convert standard HTML, with full support for CSS, JavaScript, Images, and other complex behavior to PDF.  To use external files such as images, use an absolute URL to the file.
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentHtmlToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/html/to/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert HTML document file to PNG image array
     * Convert standard HTML, with full support for CSS, JavaScript, Images, and other complex behavior to an array of PNG images, one for each page.  To use external files in your HTML such as images, use an absolute URL to the file.
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagPdfToPngResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagPdfToPngResult convertDocumentHtmlToPng(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagPdfToPngResult) client.invoke(
            'POST', '/convert/html/to/png', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagPdfToPngResult.class
        );
    }
    /**
     * HTML Document file to Text (txt)
     * HTML document to text
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagTextConversionResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagTextConversionResult convertDocumentHtmlToTxt(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagTextConversionResult) client.invoke(
            'POST', '/convert/html/to/txt', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagTextConversionResult.class
        );
    }
    /**
     * Convert Keynote Presentation (KEY) to PDF
     * Convert Mac Keynote Presentation (KEY) to standard PDF
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentKeynoteToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/keynote/to/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Email MSG file to HTML string
     * Convert Outlook Email MSG file to HTML string and attachments. Supports images if they are base 64 inline. Supports most, but not all, RTF bodied MSG files.
     * @param inputFile Input file to perform the operation on. (required)
     * @param bodyOnly Optional; If true, the HTML string will only include the body of the MSG. Other information such as subject will still be given as properties in the response object. Default is false. (optional)
     * @param includeAttachments Optional; If false, the response object will not include any attachment files from the input file. Default is true. (optional)
     * @return SwagMsgToHtmlResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagMsgToHtmlResult convertDocumentMsgToHtml(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagMsgToHtmlResult) client.invoke(
            'POST', '/convert/msg/to/html', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'bodyOnly' => (Boolean) params.get('bodyOnly'),
                'includeAttachments' => (Boolean) params.get('includeAttachments')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagMsgToHtmlResult.class
        );
    }
    /**
     * Convert Email MSG file to PDF document
     * Convert Outlook Email MSG file to PDF document. Supports images if they are base 64 inline. Supports most, but not all, RTF bodied MSG files.
     * @param inputFile Input file to perform the operation on. (required)
     * @param bodyOnly Optional; If true, the HTML string will only include the body of the email. Other information such as subject will still be given as properties in the response object. Default is false. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentMsgToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/msg/to/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'bodyOnly' => (Boolean) params.get('bodyOnly')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Office Open Document Presentation ODP to PDF
     * Convert Office Open Document Presentation (ODP) to standard PDF
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentOdpToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/odp/to/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Office Open Document Spreadsheet ODS to PDF
     * Convert Office Open Document Spreadsheet (ODS) to standard PDF
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentOdsToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/ods/to/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Office Open Document ODT to Word DOCX
     * Convert Office Open Document Text File (ODT) to Word DOCX Document
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentOdtToDocx(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/odt/to/docx', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Office Open Document ODT to PDF
     * Convert Office Open Document Text File (ODT) to standard PDF
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentOdtToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/odt/to/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert PDF to Word DOCX Document
     * Convert standard PDF to Office Word Documents (docx).    Converts a PDF at high fidelity into Word format, where it can be easily edited and processed.
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentPdfToDocx(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/pdf/to/docx', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert PDF to Word DOCX Document based on rasterized version of the PDF
     * Convert standard PDF to Office Word Documents (docx), but first rasterize the PDF.    Converts a PDF at high fidelity into Word format.
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentPdfToDocxRasterize(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/pdf/to/docx/rasterize', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert PDF to PNG Image Array
     * Convert PDF document to PNG array, one image per page.
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagPdfToPngResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagPdfToPngResult convertDocumentPdfToPngArray(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagPdfToPngResult) client.invoke(
            'POST', '/convert/pdf/to/png', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagPdfToPngResult.class
        );
    }
    /**
     * Convert PDF to Single PNG image
     * Convert PDF document to a single tall PNG image, by stacking/concatenating the images vertically into a single &quot;tall&quot; image
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentPdfToPngSingle(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/pdf/to/png/merge-single', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert PDF to PowerPoint PPTX Presentation
     * Convert standard PDF to Office PowerPoint Presentation (pptx).  Converts a PDF file at high fidelity into PowerPoint format, where it can be easily edited and processed.
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentPdfToPptx(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/pdf/to/pptx', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert PDF Document to Text (txt)
     * PDF document to text
     * @param inputFile Input file to perform the operation on. (required)
     * @param textFormattingMode Optional; specify how whitespace should be handled when converting PDF to text.  Possible values are \&#39;preserveWhitespace\&#39; which will attempt to preserve whitespace in the document and relative positioning of text within the document, and \&#39;minimizeWhitespace\&#39; which will not insert additional spaces into the document in most cases.  Default is \&#39;preserveWhitespace\&#39;. (optional)
     * @return SwagTextConversionResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagTextConversionResult convertDocumentPdfToTxt(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagTextConversionResult) client.invoke(
            'POST', '/convert/pdf/to/txt', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'textFormattingMode' => (String) params.get('textFormattingMode')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagTextConversionResult.class
        );
    }
    /**
     * Convert PNG Array to PDF
     * Convert an array of PNG images, one image per page, into a newly-created PDF.  Supports images of different sizes as input.
     * @param inputFile1 First input file to perform the operation on. (required)
     * @param inputFile2 Second input file to perform the operation on. (required)
     * @param inputFile3 Third input file to perform the operation on. (optional)
     * @param inputFile4 Fourth input file to perform the operation on. (optional)
     * @param inputFile5 Fifth input file to perform the operation on. (optional)
     * @param inputFile6 Sixth input file to perform the operation on. (optional)
     * @param inputFile7 Seventh input file to perform the operation on. (optional)
     * @param inputFile8 Eighth input file to perform the operation on. (optional)
     * @param inputFile9 Ninth input file to perform the operation on. (optional)
     * @param inputFile10 Tenth input file to perform the operation on. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentPngArrayToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile1'), 'inputFile1');
        client.assertNotNull(params.get('inputFile2'), 'inputFile2');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile1', (Blob) params.get('inputFile1')));
        form.addAll(client.makeParam('inputFile2', (Blob) params.get('inputFile2')));
        form.addAll(client.makeParam('inputFile3', (Blob) params.get('inputFile3')));
        form.addAll(client.makeParam('inputFile4', (Blob) params.get('inputFile4')));
        form.addAll(client.makeParam('inputFile5', (Blob) params.get('inputFile5')));
        form.addAll(client.makeParam('inputFile6', (Blob) params.get('inputFile6')));
        form.addAll(client.makeParam('inputFile7', (Blob) params.get('inputFile7')));
        form.addAll(client.makeParam('inputFile8', (Blob) params.get('inputFile8')));
        form.addAll(client.makeParam('inputFile9', (Blob) params.get('inputFile9')));
        form.addAll(client.makeParam('inputFile10', (Blob) params.get('inputFile10')));

        return (Blob) client.invoke(
            'POST', '/convert/png/to/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert PowerPoint PPT (97-03) Presentation to PDF
     * Convert Office PowerPoint (97-2003) Documents (ppt) to standard PDF
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentPptToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/ppt/to/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert PowerPoint PPT (97-03) Presentation to PPTX
     * Convert/upgrade Office PowerPoint (97-2003) Documents (ppt) to modern PPTX
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentPptToPptx(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/ppt/to/pptx', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert PowerPoint PPTX Presentation to PDF
     * Convert Office PowerPoint Documents (pptx) to standard PDF
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentPptxToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/pptx/to/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert PowerPoint PPTX to PNG image array
     * Converts a PowerPoint Presentation (PPTX) file to an array of PNG images, one for each page.
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagPptxToPngResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagPptxToPngResult convertDocumentPptxToPng(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagPptxToPngResult) client.invoke(
            'POST', '/convert/pptx/to/png', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagPptxToPngResult.class
        );
    }
    /**
     * Convert PowerPoint PPTX Presentation to Text (txt)
     * Convert Office PowerPoint Documents (pptx) to standard Text
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagTextConversionResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagTextConversionResult convertDocumentPptxToTxt(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagTextConversionResult) client.invoke(
            'POST', '/convert/pptx/to/txt', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagTextConversionResult.class
        );
    }
    /**
     * Convert Rich Text Format RTF to PDF
     * Convert Rich Text Format Document (RTF) to standard PDF
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentRtfToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/rtf/to/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Excel XLS (97-03) Spreadsheet to CSV
     * Convert/upgrade Office Excel (97-2003) Workbooks (xls) to standard CSV format.
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentXlsToCsv(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/xls/to/csv', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Excel XLS (97-03) Spreadsheet to PDF
     * Convert Office Excel (97-2003) Workbooks (xls) to standard PDF.  Converts all worksheets in the workbook to PDF.
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentXlsToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/xls/to/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Excel XLS (97-03) Spreadsheet to XLSX
     * Convert/upgrade Office Excel (97-2003) Workbooks (xls) to modern XLSX format.
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentXlsToXlsx(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/xls/to/xlsx', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Excel XLSX Spreadsheet to CSV, Single Worksheet
     * Convert Office Excel Workbooks (XLSX) to standard Comma-Separated Values (CSV) format.  Supports both XLSX and XLSB file Excel formats.  If the input file contains multiple worksheets, the first one is used.  If you wish to convert all of the worksheets (not just the first one), be sure to use the xlsx/to/csv/multi API.
     * @param inputFile Input file to perform the operation on. (required)
     * @param outputEncoding Optional, set the output text encoding for the result; possible values are UTF-8, ASCII and UTF-32.  Default is UTF-8. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentXlsxToCsv(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/xlsx/to/csv', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'outputEncoding' => (String) params.get('outputEncoding')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Excel XLSX Spreadsheet to CSV, Multiple Worksheets
     * Convert Office Excel Workbooks (XLSX) to standard Comma-Separated Values (CSV) format, with support for multiple worksheets.  Supports both XLSX and XLSB file Excel formats.  Returns multiple CSV files, one for each worksheet (tab) in the spreadsheet.
     * @param inputFile Input file to perform the operation on. (required)
     * @param outputEncoding Optional, set the output text encoding for the result; possible values are UTF-8, ASCII and UTF-32.  Default is UTF-8. (optional)
     * @return SwagCsvCollection
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagCsvCollection convertDocumentXlsxToCsvMulti(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagCsvCollection) client.invoke(
            'POST', '/convert/xlsx/to/csv/multi', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'outputEncoding' => (String) params.get('outputEncoding')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagCsvCollection.class
        );
    }
    /**
     * Convert Excel XLSX Spreadsheet to PDF
     * Convert Office Excel Workbooks (XLSX) to standard PDF.  Converts all worksheets in the workbook to PDF.  Supports both XLSX and XLSB Excel file formats.
     * @param inputFile Input file to perform the operation on. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob convertDocumentXlsxToPdf(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/convert/xlsx/to/pdf', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Excel XLSX spreadsheet to PNG image array
     * Converts an Excel Spreadsheet (XLSX) file to an array of PNG images, one for each page.
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagXlsxToPngResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagXlsxToPngResult convertDocumentXlsxToPng(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagXlsxToPngResult) client.invoke(
            'POST', '/convert/xlsx/to/png', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagXlsxToPngResult.class
        );
    }
    /**
     * Convert Excel XLSX Spreadsheet to Text (txt)
     * Convert Office Excel Workbooks (XLSX) to standard Text.  Converts all worksheets in the workbook to Text.  Supports both XLSX and XLSB file formats.  When a spreadsheet contains multiple worksheets, will export all of the text from all of the worksheets.  If you wish to export the text from only one worksheet, try using the Split XLSX API to split the spreadsheet into multiple worksheet files, and then run XLSX to Text on the individual worksheet file that you need to extract the text from.
     * @param inputFile Input file to perform the operation on. (required)
     * @return SwagTextConversionResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagTextConversionResult convertDocumentXlsxToTxt(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (SwagTextConversionResult) client.invoke(
            'POST', '/convert/xlsx/to/txt', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            SwagTextConversionResult.class
        );
    }
}
