/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Input to a Update Table Cell request
 */
public class SwagUpdateDocxTableCellRequest implements Swagger.MappedProperties {
    /**
     * Optional: Bytes of the input file to operate on
     * @return inputFileBytes
     */
    public Blob inputFileBytes { get; set; }

    /**
     * Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
     * @return inputFileUrl
     */
    public String inputFileUrl { get; set; }

    /**
     * Table cell contents you would like to update the cell with
     * @return cellToUpdate
     */
    public SwagDocxTableCell cellToUpdate { get; set; }

    /**
     * 0-based index of the Table Row to update
     * @return tableRowIndex
     */
    public Integer tableRowIndex { get; set; }

    /**
     * 0-based index of the Table Cell (within the row) to update
     * @return tableCellIndex
     */
    public Integer tableCellIndex { get; set; }

    /**
     * Required; the path to the existing table to modify
     * @return existingTablePath
     */
    public String existingTablePath { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'InputFileBytes' => 'inputFileBytes',
        'InputFileUrl' => 'inputFileUrl',
        'CellToUpdate' => 'cellToUpdate',
        'TableRowIndex' => 'tableRowIndex',
        'TableCellIndex' => 'tableCellIndex',
        'ExistingTablePath' => 'existingTablePath'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagUpdateDocxTableCellRequest getExample() {
        SwagUpdateDocxTableCellRequest updateDocxTableCellRequest = new SwagUpdateDocxTableCellRequest();
        updateDocxTableCellRequest.inputFileBytes = EncodingUtil.base64Decode('VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu');
        updateDocxTableCellRequest.inputFileUrl = 'aeiou';
        updateDocxTableCellRequest.cellToUpdate = SwagDocxTableCell.getExample();
        updateDocxTableCellRequest.tableRowIndex = 123;
        updateDocxTableCellRequest.tableCellIndex = 123;
        updateDocxTableCellRequest.existingTablePath = 'aeiou';
        return updateDocxTableCellRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagUpdateDocxTableCellRequest) {
            SwagUpdateDocxTableCellRequest updateDocxTableCellRequest = (SwagUpdateDocxTableCellRequest) obj;
            return this.inputFileBytes == updateDocxTableCellRequest.inputFileBytes
                && this.inputFileUrl == updateDocxTableCellRequest.inputFileUrl
                && this.cellToUpdate == updateDocxTableCellRequest.cellToUpdate
                && this.tableRowIndex == updateDocxTableCellRequest.tableRowIndex
                && this.tableCellIndex == updateDocxTableCellRequest.tableCellIndex
                && this.existingTablePath == updateDocxTableCellRequest.existingTablePath;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (inputFileBytes == null ? 0 : System.hashCode(inputFileBytes));
        hashCode = (17 * hashCode) + (inputFileUrl == null ? 0 : System.hashCode(inputFileUrl));
        hashCode = (17 * hashCode) + (cellToUpdate == null ? 0 : System.hashCode(cellToUpdate));
        hashCode = (17 * hashCode) + (tableRowIndex == null ? 0 : System.hashCode(tableRowIndex));
        hashCode = (17 * hashCode) + (tableCellIndex == null ? 0 : System.hashCode(tableCellIndex));
        hashCode = (17 * hashCode) + (existingTablePath == null ? 0 : System.hashCode(existingTablePath));
        return hashCode;
    }
}

